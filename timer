# shellcheck shell=bash
@src std/oo

timer.make(){
    while [ $# -gt 0 ]; do
        local timer=$1
        eval "export $timer=$(date +%s)"
        shift
    done
}

timer.reset(){
    local timer=${O:?provider O}
    eval "export $timer=$(date +%s)"
}

timer.elapsed(){
    local end_time
    end_time="$(date +%s)"
    local name=${O:?provider O}
    local start_time=${!name}
    echo $(( end_time  - start_time ))
}

timer.free(){
    local name=${O:?provider O}
    eval "$name="
}

timer.new(){
    # timer.make "$@"
    # while [ $# -gt 0 ]; do
    #     local obj=$1
    #     local method
    #     for func in $(typeset -F | cut -d ' ' -f 3 | grep "^timer.*" | grep -v -E "(make)|(new)" | cut -d ' ' -f 1); do
    #         local method=$(echo $func | cut -d '.' -f 2)
    #         eval "$obj.$method(){ O=$obj $func \"\$@\"; }"
    #     done
    #     shift
    # done
    oo.create_new_function timer "$@"
}

# testcase: REPEAT=3 timer.measure "sleep 3s"
#> REPEAT=3 timer.measure "sleep 3s"
#3 3 3
timer.measure(){
    local start i
    local A=()
    for i in $(seq ${REPEAT:-1}); do
        timer.make start
        eval "$@" 1>/dev/null 2>&1
        A=("${A[@]}" "$(O=start timer.elapsed)")
        O=start timer.free
    done

    echo "${A[@]}"
}

