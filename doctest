# shellcheck shell=bash

debug_init doctest

str_regex(){
    local value="${1}"
    local pattern="${2:?str_regex(): Provide pattern}"

    # Only dash does not support pattern="${pattern//\\/\\\\}"

    echo "" | awk -v value="$value" "END {
        if (match(value, /$pattern/)) {
            exit 0
        } else {
            exit 1;
        }
    }"
}

doctest_debug(){
    echo "$@" >&2
}

_doctest_run_code(){
    local test_script_fifo=${test_script_fifo:?Provide test script fifo}
    local out_fifo=${out_fifo:?Provide out fifo}

    local script_code="${1:?"Provide script code"}"
    local script_actual_result script_expect_result="${2}"
    # TODO: How to get rid of it in sh
    # echo "${script_code:1}" >"$test_script_fifo"
    echo "${script_code#> *}" >"$test_script_fifo"
    script_actual_result="$(cat "$out_fifo")"
    if [ ! "$script_actual_result" == "$script_expect_result" ]; then
        {
            echo -e "\033[31mNOT ok\033[0m"
            echo -e "\033[36m--code--\033[0m"
            echo "$script_code"
            echo -e "\033[32m--expect--\033[0m"
            echo "$script_expect_result"
            echo -e "\033[31m--actual--\033[0m"
            echo "$script_actual_result"          
            echo "===="
            return 1
        }
    fi
}

# In the future, using the awk to accelerate.
# Main Method.
doctest(){
    local test_script_fifo="doctest.tmp.input.fifo" 
    local out_fifo="doctest.tmp.output.fifo"
    local IFS=

    rm "$test_script_fifo" "$out_fifo" 2>/dev/null 
    mkfifo "$test_script_fifo" "$out_fifo"

    export test_script_fifo out_fifo
    (
        #shellcheck disable=SC1090
        . "$1";
        _doctest_exec_script "${1:?script}" "$test_script_fifo" "$out_fifo" 1>/dev/null 2>&1
    ) &

    local PROCESS_ID="$!"
    local return_code=0

    local start=""
    local block=""
    local script_code=""
    local script_expect_result=""
    while read -r line; do
        if [ -n "$start" ]; then
            # if [[ ! "$line" =~ ^$start$ ]]; then
            if [ ! "$line" = "$start" ]; then
                block="$block
$line"
                continue
            fi

            doctest_debug "starting running"

            # start="" # clear out after
            local cl
            block="$block
>  "
            IFS=$'\n'
            for cl in $block; do
                # If it is not command
                if ! str_regex "$cl" "^> "; then
                    if [ -z "$script_expect_result" ]; then
                        script_expect_result="$cl"
                    else
                        script_expect_result="$script_expect_result
$cl"
                    fi
                    continue
                fi

                # IF it is a command
                if [ -n "$script_code" ]; then
                    if [ "$X_BASH_SRC_SHELL" != "sh" ] || [ "$start" != "DOCTEST-NO-SH" ]; then
                        _doctest_run_code "$script_code" "$script_expect_result" || {
                            return_code=$?
                            rm "$test_script_fifo" "$out_fifo"
                            kill -9 $PROCESS_ID 1>/dev/null 2>&1
                            return $return_code
                            # break 2   # break 2 unsupported in sh
                        }
                    fi
                fi

                script_code="$cl"
                script_expect_result=""
            done
            start=""
            continue
        fi

        # Must start with doctest
        # [[ "$line" =~ ^\<\<([[:alnum:]]+)$ ]] && {
        # [[ "$line" =~ ^\ *\:*\ *\<\<\'((doctest|DOCTEST)[A-Za-z0-9-]*)\'$ ]] && {
        str_regex "$line" "^ *: *<<'?DOCTEST(-NO-SH)?'?$" && {
            local k="${line#*DOCTEST-NO-SH*}"
            if [ "${#k}" -eq ${#line} ]; then
                start="DOCTEST"
            else
                start="DOCTEST-NO-SH"
            fi
            doctest_debug "Token FOUND: $start"
            block=""
        }
    done <"$1"

    echo "return" > "$test_script_fifo"
    cat "$out_fifo" # Or the execScript will be block because of the redirection
    rm "$test_script_fifo" "$out_fifo"
    kill -9 $PROCESS_ID 1>/dev/null 2>&1
    return $return_code
}

_doctest_exec_script(){
    while :; do
        eval "$(cat "${2:?fifo file}")" 1>"${3:?output fifo file}" 2>&1
    done
}

[ "$#" -ne 0 ] && doctest "$@"
