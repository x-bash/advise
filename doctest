# shellcheck shell=bash

# @src std/str

#> str.join "a" 1 2 3
#1a2a3
str.join(){
    local sep=$1
    shift 1
    local bar
    bar=$(printf "${sep}%s" "$@")
    bar=${bar:${#sep}}
    echo "$bar"
}

doctest.run(){
    local LOG=":"
    [ -n "$VERBOSE" ] && LOG="echo "
    local FILELIST=("$@")
    shift $#
    for i in "${FILELIST[@]}"; do
        [ -f "$i" ] || { echo "File DOESNOT exists: $i" >&2 && return 1; }
        source "$i"
        local line
        local test_script_string="" test_script_result="" expected_result_string=""
        
        local status=0 # 0 ignore; 1 test_script; 2 test_result
        # TODO: figure out why we need double '\n'
        (cat "$i"; echo -e "\n\n") | while read -r line; do
            if [[ "$line" =~ ^\#\> ]]; then
                line=${line:3}
                case "$status" in
                    0)  test_script_string="$line"; 
                        status=1;
                        continue ;;
                    1) 
                        test_script_string="$test_script_string
$line"; 
                        continue ;;
                    2)  status=1
                        # run the code
                    ;;
                esac
                
            elif [[ "$line" =~ ^\# ]] ; then
                line=${line:1}
                case "$status" in
                    1)  expected_result_string="$line"; 
                        status=2; 
                        continue ;;
                    2) 
                        expected_result_string="$expected_result_string
$line";
                        status=2;
                        continue ;;
                esac
            fi

            $LOG "$line" >&2
            if [ "$test_script_string" != "" ]; then
                $LOG "current line is: $line" >&2
                $LOG "test_script_string is: $test_script_string" >&2
                $LOG "expected_result_string is: $expected_result_string" >&2

                test_script_result="$(eval "$test_script_string")"

                $LOG "test_script_result is: $test_script_result" >&2
                if [ $? -ne 0 ]; then
                    echo "NOT OK: Exit code is not 0"
                    return 1
                else
                    if [ "$expected_result_string" = "$test_script_result" ]; then
                        echo "OK"
                    else
                        echo "NOT OK"
                        return 1
                    fi
                fi
                test_script_string=""
                expected_result_string=""
            fi

            [ $status -eq 1 ] && test_script_string="$line"
        done  

    done
}


<<TEST
> str.join "a" 1 2 3
1a2a3
> echo hi
hi
> echo world
world
TEST
str.join(){
    local sep=$1
    shift 1
    local bar
    bar=$(printf "${sep}%s" "$@")
    bar=${bar:${#sep}}
    echo "$bar"
}

doctest.runCode(){
    local test_script_fifo=${test_script_fifo:?Provide test script fifo}
    local out_fifo=${out_fifo:?Provide out fifo}

    local script_code=${1:?"Provide script code"}
    local script_actual_result script_expect_result=${2:?"Provide script expect result"}

    echo ${script_code:1} >"$test_script_fifo"
    script_actual_result="$(cat "$out_fifo")"

    if [ ! "$script_actual_result" == "$script_expect_result" ]; then
        {
            echo "NOT ok"
            echo "--code--"
            echo "$script_code"
            echo "--expect--"
            echo "$script_expect_result"
            echo "--actual--"
            echo "$script_actual_result"          
            echo "===="
            return 1
        }
    fi
}

doctest.runFile(){
    
    local block=()

    local script_code script_expect_result=""

    local test_script_fifo="doctest.tmp.input.fifo" out_fifo="doctest.tmp.output.fifo"

    rm "$test_script_fifo" "$out_fifo" 2>/dev/null 
    mkfifo "$test_script_fifo" "$out_fifo"

    test_script_fifo="doctest.tmp.input.fifo" out_fifo="doctest.tmp.output.fifo" \
        doctest.execScript "${1:?script}" "$test_script_fifo" "$out_fifo" & 1>/dev/null 2>&1
    local PROCESS_ID="$!"

    local start=""
    while read -r line; do
        if [ -n "$start" ]; then
            if [[ ! "$line" =~ ^$start$ ]]; then
                block=("${block[@]}" "$line")
                # TODO: block+=("$line")
                continue
            fi

            start="" # clear out
            for cl in "${block[@]}"; do
                if [[ ! "$cl" =~ ^\>[[:space:]] ]]; then
                    if [ -z "$script_expect_result" ]; then
                        script_expect_result="$cl"
                    else
                        script_expect_result="$script_expect_result
$cl"
                    fi
                    
                    continue
                fi

                if [ -n "$script_code" ]; then
                    doctest.runCode "$script_code" "$script_expect_result" || {
                        rm $test_script_fifo $out_fifos
                        kill -9 $PROCESS_ID 1>/dev/null 2>&1
                        return $?
                    }
                fi

                script_code="$cl"
                script_expect_result=""
            done
            continue
        fi

        if [[ "$line" =~ ^\<\<([[:alnum:]]+)$ ]]; then
            start="${BASH_REMATCH[1]}"
        fi
    done <"$1"

    rm $test_script_fifo $out_fifos
    kill -9 $PROCESS_ID 1>/dev/null 2>&1
}

doctest.execScript(){
    while :; do
        eval "$(cat ${2:?fifo file})" 1>"${3:?output fifo file}" 2>&1
    done
}
