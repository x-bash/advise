# shellcheck disable=SC2120
dict_print(){
    local O="${O:?list_name}"
    local data
    data="$(eval printf "%s" "\"\$${O}\"")"

    if [ "$#" -eq 0 ]; then
        printf "${ITEM_SEP:-"\\n"}${DICT_SEP}${KV_SEP:-"="}${DICT_SEP}%s"  "$data" | tr "\n" "\001" | awk -v RS="${DICT_SEP}" -v KV_SEP="$DICT_KV_SEP" \
        '
            NR==1 {     
                if (ITEM_SEP == "\\n")  ITEM_SEP = "\n"
                if (ITEM_SEP == "\\t")  ITEM_SEP = "\t"
                if (ITEM_SEP == "\\v")  ITEM_SEP = "\v"
                ITEM_SEP=$0
            }
            NR==2 {     KV_SEP  =$0         }
            NR==3 { 
                len = $0;   result=""
            }
            NR>=4 {
                if (NR % 2 == 0) { # key
                    key = $0
                } else {
                    if (NR == 5) {
                        result = result                 key KV_SEP $0
                    } else {
                        result = result  ITEM_SEP       key KV_SEP $0
                    }
                }
            }
            END   {
                gsub("\001", "\n", result)
                printf("%s", result)
            }
        ' -
    else
        printf "${ITEM_SEP:-"\\n"}${DICT_SEP}${KV_SEP:-"="}${DICT_SEP}%s${DICT_SEP}%s" "$1" "$data" | tr "\n" "\001" | awk -v RS="${DICT_SEP}" \
        '
            NR==1 {     ITEM_SEP=$0         }
            NR==2 {     KV_SEP  =$0         }
            NR==3 {     pattern = $0; enable=""; result = "";  }
            NR>=5 {
                if (NR % 2 == 1) {          # key
                    if ($0 ~ pattern)       enable = $0
                } else {
                    if (enable != "") {
                        if (result == "")   result =            enable KV_SEP $0
                        else                result = ITEM_SEP   enable KV_SEP $0
                        enable = ""
                    }
                }
            }
            END   {
                gsub("\001", "\n", result)
                printf("%s", result)
            }
        ' -
    fi
}