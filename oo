# shellcheck shell=bash

oo.create_new_function(){
    local prototype=$1
    shift
    "$prototype.make" "$@"
    while [ $# -gt 0 ]; do
        local obj=$1
        local method 1>/dev/null # to support zsh
        local method_list=()
        # typeset -f | grep '[A-Za-z_-]\+ ()' | cut -d ' ' -f 1
        # for func in $(typeset -F | cut -d ' ' -f 3 | grep "^$prototype.*" | grep -v -E "(make)|(new)" | cut -d ' ' -f 1); do
        for func in $(typeset -f | grep '[A-Za-z_-]\+ ()' | cut -d ' ' -f 1 | grep "^$prototype.*" | grep -v -E "(make)|(new)" | cut -d ' ' -f 1); do
            method=$(echo "$func" | cut -d '.' -f 2)
            method_list=("${method_list[@]}" "$obj.$method")
            eval "$obj.$method(){ O=$obj $func \"\$@\"; }"
        done

        eval "$obj.delete(){
            unset -f ${method_list[*]};
            unset -f $obj.delete
        }"

        shift
    done
}

oo.make(){
    local O=${O:?Provode object name}
    local code="unset -f $O.delete;"
    for i in "$@"; do

        if [ "$i" == "delete" ] || [ "$i" == "toJSON" ]; then
            echo "attribute cannot be delete or toJSON"
            eval "$code"
            return 1
        fi

        local k=$(echo $i | cut -d '=' -f 1)
        local v=$(echo $i | cut -d '=' -f 2)
        eval "$O.$k(){ echo '$v'; }"

        code="$code unset -f $O.$k;"
    done

    eval "$O.delete(){ echo \'$v\'; }"
}
