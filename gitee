# shellcheck shell=bash

# TODO: Add --dry-run

@src std/http

# Without Context, gt and http share same name
gt.client.make(){
    local O="${1:?Provide client name}"
    http.make 'https://gitee.com/api' "$O"
    http.header.add 'Content-Type' 'application/json;charset=UTF-8'
}

gt.current-repo(){
    if [ -z "$1" ]; then
        echo "$repo"
        return 0
    fi
    repo=${1:-provide repo name}
}

gt.current-owner(){
    if [ -z "$1" ]; then
        echo "${owner}"
        return 0
    fi
    owner=${1:-provide owner name}
}

gt.request(){
    if [ -n "$GITEE_TOKEN" ]; then
        http.body.add access_token "$GITEE_TOKEN"
    fi
    http.request "$@"
}

gt.get(){ 
    if [ -z "$GITEE_TOKEN" ]; then
        http.get "$@" "access_token=$GITEE_TOKEN"
    else
        http.get
    fi
}

gt.post(){ X=post gt.request "$@"; }
gt.put(){ X=put gt.request "$@"; }
gt.delete(){ x=delete gt.request "$@"; }

# gt.delete(){
#     (
#         http.cd "$1"
#         shift
#         if [ -n "$GITEE_TOKEN" ]; then
#             D="$(echo "${D:-\{\}}" | jq ".access_token |= $GITEE_TOKEN")"
#             D="$(jq -n ".access_token|=$GITEE_TOKEN")"
#         fi
#         D="$D" http.delete
#     )
# }

###########

gt.eq_str_by_name(){
    for i in "$@"; do
        echo "$i=${!i}"
    done
}

gt.org.create(){
    @env org "organization name"
    gt.post "/v5/users/organization" name="$org" org="$org"
}

gt.get.header(){
    local url="$GT_URL${1:?Suburl}?access_token=$GT_TOKEN${2}"
    echo "Visiting $url" >&2
    curl -X GET -I --header 'Content-Type: application/json;charset=UTF-8' "$url" 2>/dev/null
}

gt.repo.list(){
    if [ -z "$org" ]; then
        gt.organization.repo.list "$@"
    elif [ -z "$enterprise" ]; then
        gt.enterprise.repo.list "$@"
    else
        gt.user.repo.list "$@"
    fi
}

gt.enterprise.repo.list(){
    @env enterprise "enterprise name"
    local i=0 max_page=100000
    while (( i < max_page; i++ )); do
        gt.get "/v5/enterprises/$enterprise/repos" type=all page=$i per_page=100 |
            jq -r ".[] | .full_name"
        max_page=$(gt.resp.header "max_age")
    done
}

# TODO
gt.organization.repo.list(){
    @env org "organization name"
    local i=0 max_page=100000
    while (( i < max_page; i++ )); do
        gt.get "/v5/organizations/$org/repos" type=all page=$i per_page=100 |
            jq -r ".[] | .full_name"
        max_page=$(gt.resp.header "max_age")
    done
}

gt.repo.create(){
    if [ -z "$org" ]; then
        gt.organization.repo.create "$@"
    elif [ -z "$enterprise" ]; then
        gt.enterprise.repo.create "$@"
    else
        gt.user.repo.create "$@"
    fi
}

# arguments NAME
gt.user.repo.create(){
    @env name "repo name"
    @env has_issues=true "" == true false
    @env has_wiki=true "" == true false
    @env access=private == public private innerSource

    local private
    case "$access" in
        public)  private=false;;
        private) private=true;;
    esac

    (
        http.body.add_by_name name has_issues has_wiki private
        gt.post "/v5/user/repos"
    )
}

# ORGANIZATION NAME
gt.organization.repo.create(){
    @env org "organization name"
    @env name "repo name"
    @env has_issues=true "" == true false
    @env has_wiki=true "" == true false
    @env permission=pull "Repo permission" = push push admin
    @env access=private == public private

    local public
    case "$access" in
        public)  public=0;;
        private) public=1;;
    esac

    (
        http.body.add_by_name name has_issues has_wiki public
        gt.post "/v5/orgs/$org/repos"
    )
}

# ENTERPRISE NAME
gt.enterprise.repo.create(){
    @env enterprise "enterprise name"
    @env name "repo name"
    @env has_issues=true "" == true false
    @env has_wiki=true "" == true false
    @env access=private == public private innerSource

    local private
    case "$access" in
        public)  private=0;;
        private) private=1;;
        innerSource) private=2;;
    esac

    if [ "$#" -eq 0 ]; then
        (
            http.body.add_by_name name has_issues has_wiki private
            gt.post "/v5/enterprises/$enterprise/repos"
        )
        return 0
    fi

    for name in "$@"; do
        (
            http.body.add_by_name name has_issues has_wiki private
            gt.post "/v5/enterprises/$enterprise/repos"
        )
    done
}

gt.repo.collaborators(){
    : Provide function, add from enterprise list
    : Provide function, remove from existing member list
}

# gt.repo.member.add pull:edwinjhlee,work,adf push:work,adf admin:edwinjhlee
gt.repo.collaborators.add(){
    if [ "$1" == "-h" ]; then
        echo "Example: owner=d-y-innovations repo=demo-repo username=user1 permission=pull gt.repo.member.add"
        echo "Example: repo=d-y-innovations/demo-repo gt.repo.member.add pull:user1,user2 push:user3,user4 admin:user5"
        echo "Example: repo=d-y-innovations/demo-repo gt.repo.member.add pull:user1,user2 push:user3,user2 admin:user5"
    fi

    @env owner "Repo Owner"
    @env repo "Repo name"
    @env username "Username Owner"
    @env permission=pull "Repo permission" = push push admin

    (
        http.body.add "permission=$permission"
        gt.put "/v5/repos/$owner/$repo/collaborators/$username"
    )
}


gt.repo.collaborators.remove(){
    @env owner "Repo Owner"
    @env repo "Repo name"
    # @env username "Username Owner"
    local username
    for username in "$@"; do
        gt.delete "/v5/repos/$owner/$repo/collaborators/$username"
    done
    # gt.delete "/v5/repos/${owner?:Provide owner}/${repo?:Provide Repo}/collaborators/${username:?Provider Collaborator}"
}

