# shellcheck shell=bash

# TODO: Add --dry-run

@src std/http

# Without Context, gt and http share same name

# Introducing context
gt.client.make(){
    local O="_x_cmd_x_bash_gitee_${1:?Provide client name by O environment}"

    http.make "$O" 'https://gitee.com/api'
    http.header.content-type.eq.json+utf8
    # http.header.add 'Content-Type' 'application/json;charset=UTF-8'
}

gt.token.set(){
    local O="_x_cmd_x_bash_gitee_${O:?Provide client name by O environment}"

    local GITEE_TOKEN=${1:?"Please provide gitee token"}
    http.dict.set "access_token" "$GITEE_TOKEN"

    http.body.add access_token "$GITEE_TOKEN"
    http.qs.add access_token "$GITEE_TOKEN"

    # TODO: get user information, set current owner is user
}

gt.token.get(){
    local O="_x_cmd_x_bash_gitee_${O:?Provide client name by O environment}"
    http.dict.get "access_token" 
}

gt.owner.set(){
    local O="_x_cmd_x_bash_gitee_${O:?Provide client name by O environment}"

    local owner="$1"

    # TODO: If type not given, we should query the api to find out its type
    local type="$2"
    gt.current-owner "$owner"
    gt.current-owner-type "$type"
}

# gt._owner(){
#     repo=${owner:-$(http.dict.getput "current-repo")}
#     if [[ "$repo" = */* ]]; then
#         owner=${repo%%/*}
#         repo=${repo##*/}
#     fi

#     echo "${owner}"
# }

# gt._repo(){
#     repo=${owner:-$(http.dict.getput "current-repo")}
#     if [[ "$repo" = */* ]]; then
#         owner=${repo%%/*}
#         repo=${repo##*/}
#     fi 
# }

gt._parse_owner_repo(){
    local O="_x_cmd_x_bash_gitee_${O:?Provide client name by O environment}"

    @p '
        repo "Provide repo name"
    '
    if [[ "$repo" = */* ]]; then
        owner=${repo%%/*}
        repo=${repo##*/}
    fi
}

gt.get_env_owner_repo_type(){
    local O="_x_cmd_x_bash_gitee_${O:?Provide client name by O environment}"

    gt._parse_owner_repo
    owner=${}
    if [ "$owner" = "" ]; then
        owner=$(gt.current-owner)
        repo=$(gt.current-repo)
    fi
}

# Providing owner/owner-type

# shellcheck disable=SC2120
gt.current-repo(){
    local O="_x_cmd_x_bash_gitee_${O:?Provide client name by O environment}"

    local repo="$1" owner=""

    gt._parse_owner_repo
    http.dict.getput "current-repo" "$1";
    [ -n "$owner" ] && gt.current-owner
}

gt.current-owner(){ 

    local O="_x_cmd_x_bash_gitee_${O:?Provide client name by O environment}"


    @p '
        owner "Provide owner name"
        type=none "Provide type name" = user enterprise organization none
    '

    if [ "$type" == "none" ]; then
        # get type
        type=user
    fi

    http.dict.getput "current-owner" "$owner"; 
    http.dict.getput "current-owner-type" "$type"
}

gt.get(){ O="_x_cmd_x_bash_gitee_${O:?Provide client name by O environment}" http.get "$@";  }
gt.get.multi(){
    local O="_x_cmd_x_bash_gitee_${O:?Provide client name by O environment}"

    local first=() second="" flag=0
    for i in "$@"; do
        if [ "$i" == "--" ]; then
            flag=1
            continue
        fi

        if [ "$flag" -eq 0 ]; then
            first+=("$i")
        else
            second+=("$i")
        fi
    done

    if [ "${#second[@]}" -eq 0 ]; then
        second=(cat)
    fi 

    local i=0 max_page=100000
    while (( :; i < max_page; i++ )); do
        gt.get "${first[@]}" page=$i per_page=100 | eval "${second[@]}"
        max_page=$(gt.resp.header "max_age")
    done
}

gt.post(){ O="_x_cmd_x_bash_gitee_${O:?Provide client name by O environment}" http.post "$@"; }
gt.post.json(){ O="_x_cmd_x_bash_gitee_${O:?Provide client name by O environment}" http.post.json "$@"; }

gt.put(){ O="_x_cmd_x_bash_gitee_${O:?Provide client name by O environment}" http.put "$@"; }
gt.put.json(){ O="_x_cmd_x_bash_gitee_${O:?Provide client name by O environment}" http.put.json "$@"; }

gt.delete(){ O="_x_cmd_x_bash_gitee_${O:?Provide client name by O environment}" http.delete "$@"; }

# gt.json(){
#     json.generate "$@"
# }

# gt.json+token() {
#     gt.json access_token "$GITEE_TOKEN" "$@"
# }

###########

gt.eq_str_by_name(){
    for i in "$@"; do
        echo "$i=${!i}"
    done
}

# It is very rare
gt.org.create(){
    @env org "organization name"
    gt.post "/v5/users/organization" name="$org" org="$org"
}

# gt.get.header(){
#     local url="$GT_URL${1:?Suburl}?access_token=$GT_TOKEN${2}"
#     echo "Visiting $url" >&2
#     curl -X GET -I --header 'Content-Type: application/json;charset=UTF-8' "$url" 2>/dev/null
# }

gt.repo.list(){
    gt.get.multi "/v5/$(gt.current-owner-type)/$(gt.current-owner)/repos" type=all -- jq -r ".[] | .full_name"

    # local i=0 max_page=100000
    # while (( i < max_page; i++ )); do
    #     gt.get "/v5/$(gt.current-owner-type)/$(gt.current-owner)/repos" type=all page=$i per_page=100 |
    #         jq -r ".[] | .full_name"
    #     max_page=$(gt.resp.header "max_age")
    # done
}

gt.repo.clone(){
    gt.repo.clone.ssh && return 0
    gt.repo.clone.https && return 0
    return $?
}

gt.repo.clone.ssh(){
    @p '
        owner "Provide owner"
        repo "provide repo"
    '
    
    gt._parse_owner_repo
    git clone "git@github.com:$owner/$repo.git"
}

gt.repo.clone.https(){
    # parse owner/user
    gt._parse_owner_repo
    git clone "https://github.com/$owner/$repo.git"
}

gt.repo.fork(){
    : auto fork
}


<<A
How to use:
gt.current-owner lteam18
gt.repo.create "new" "abc" "cde"
A
gt.repo.create(){
    for i in "$@"; do
        "gt.$(gt.current-owner-type).repo.create" "$i"
    done
}

# arguments NAME
gt.user.repo.create(){
    @p '
        has_issues=true     = true false
        has_wiki=true       = true false
        access=private      = public private innerSource
    '

    local private
    case "$access" in
        public)  private=false;;
        private) private=true;;
    esac

    gt.post.json "/v5/user/repos" name has_issues has_wiki private
    
}

# ORGANIZATION NAME
# shellcheck disable=SC2154,SC2034
gt.organization.repo.create(){
    @p '
        has_issues=true     = true false
        has_wiki=true       = true false
        access=private      = public private innerSource
    '

    local public
    # TODO: bug?
    case "$access" in
        public)  public=0;;
        private) public=1;;
        innerSource) public=2;;
    esac

    gt.post.json "/v5/orgs/$org/repos" name has_issues has_wiki public
}

# ENTERPRISE NAME

# shellcheck disable=SC2154
gt.enterprise.repo.create(){
    @p '
        has_issues=true     = true false
        has_wiki=true       = true false
        access=private      = public private innerSource
    '

    local private
    # shellcheck disable=SC2034
    case "$access" in
        public)  private=0;;
        private) private=1;;
        innerSource) private=2;;
    esac

    gt.post.json "/v5/enterprises/$enterprise/repos" name has_issues has_wiki private
    return 0
}


gt.repo.collaborators(){
    : Provide function, add from enterprise list
    : Provide function, remove from existing member list
}

gt.repo.collaborators.list(){
    :
    # TODO: page?
    # gt.multiget "/v5/repos/$owner/$repo/collaborators" -- ""
    # gt.get "/v5/repos/$owner/$repo/collaborators"
}

# gt.repo.member.add pull:edwinjhlee,work,adf push:work,adf admin:edwinjhlee
gt.repo.collaborators.add(){
    if [ "$1" == "-h" ]; then
        echo "Example: owner=d-y-innovations repo=demo-repo username=user1 permission=pull gt.repo.member.add"
        echo "Example: repo=d-y-innovations/demo-repo gt.repo.member.add pull:user1,user2 push:user3,user4 admin:user5"
        echo "Example: repo=d-y-innovations/demo-repo gt.repo.member.add pull:user1,user2 push:user3,user2 admin:user5"
    fi

    @p '
        username "Username Owner"
        permission=pull "Repo permission" = push push admin
    '

    gt.put.json "/v5/repos/$owner/$repo/collaborators/$username" permission
}


# repo=lteam/vscode gt.repo.collaborators.remove chanchan hsn
# vscode.collaborators.remove chanchan hsn
<<A
gt.current-repo lteam/vscode
gt.repo.collaborators.remove chanchan hsn
A
gt.repo.collaborators.remove(){
    @p '
        owner "Repo Owner"
        repo "Repo name"
    '
    owner=$(gt.current-owner)
    repo=$(gt.current-repo)

    local username
    for username in "$@"; do
        gt.delete "/v5/repos/$owner/$repo/collaborators/$username"
    done
    # gt.delete "/v5/repos/${owner?:Provide owner}/${repo?:Provide Repo}/collaborators/${username:?Provider Collaborator}"
}


gt.repo.release.create(){
    :
}

gt.repo.release.get_or_create(){
    :
}

gt.repo.release.add(){
    :
}

gt.repo.release.remove(){
    :
}

gt.repo.release.attachment(){
    : Provide manager
}

gt.repo.release.attachment.list(){
    :
}

# Provide multiple files
gt.repo.release.attachment.upload(){
    :
}

# Delete the file in attachment list
gt.repo.release.attachment.remove(){
    :
}


gt.pr(){
    :
}

gt.pr.create(){
    :
}

gt.pr.list(){
    :
}

gt.pr.open(){
    :
}

gt.pr.status(){
    :
}

gt.pr.view(){
    :
}

gt.pr.checkout(){
    :
}

gt.pr.list-comment(){
    : list all of the comment in the terminal
}



