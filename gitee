# shellcheck shell=bash

# TODO: Add --dry-run

@src std/http

# Without Context, gt and http share same name

# Introducing context
gt.client.make(){
    local O="${1:?Provide client name}"
    http.make "$O" 'https://gitee.com/api'
    http.header.content-type.eq.json+utf8
    # http.header.add 'Content-Type' 'application/json;charset=UTF-8'
}

gt.set_token(){
    local GITEE_TOKEN=${1:?"Please provide gitee token"}
    http.body.add access_token "$GITEE_TOKEN"
    http.qs.add access_token "$GITEE_TOKEN"
}

gt.owner.set(){
    local owner="$1"

    # TODO: If type not given, we should query the api to find out its type
    local type="$2"
    
    @p '
        type = user enterprise organization
    '
    gt.current-owner "$owner"
    gt.current-owner-type "$type"
}

# Providing owner/owner-type
gt.current-repo(){ http.dict.getput "current-repo" "$1"; }

gt.current-owner(){ http.dict.getput "current-owner" "$1"; }
# user, organization, user
gt.current-owner-type(){ http.dict.getput "current-owner-type"; }

gt.request(){
    if [ -n "$GITEE_TOKEN" ]; then
        http.body.add access_token "$GITEE_TOKEN"
    fi
    http.request "$@"
}

gt.get(){ 
    if [ -z "$GITEE_TOKEN" ]; then
        http.get "$@" "access_token=$GITEE_TOKEN"
    else
        http.get
    fi
}

gt.post(){ X=post gt.request "$@"; }
gt.put(){ X=put gt.request "$@"; }
gt.delete(){ X=delete gt.request "$@"; }

# gt.delete(){
#     (
#         http.cd "$1"
#         shift
#         if [ -n "$GITEE_TOKEN" ]; then
#             D="$(echo "${D:-\{\}}" | jq ".access_token |= $GITEE_TOKEN")"
#             D="$(jq -n ".access_token|=$GITEE_TOKEN")"
#         fi
#         D="$D" http.delete
#     )
# }

gt.json(){
    json.generate "$@"
}

gt.json+token() {
    gt.json access_token "$GITEE_TOKEN" "$@"
}

###########

gt.eq_str_by_name(){
    for i in "$@"; do
        echo "$i=${!i}"
    done
}

# It is very rare
gt.org.create(){
    @env org "organization name"
    gt.post "/v5/users/organization" name="$org" org="$org"
}

gt.get.header(){
    local url="$GT_URL${1:?Suburl}?access_token=$GT_TOKEN${2}"
    echo "Visiting $url" >&2
    curl -X GET -I --header 'Content-Type: application/json;charset=UTF-8' "$url" 2>/dev/null
}

gt.repo.list(){ 
    local i=0 max_page=100000
    while (( i < max_page; i++ )); do
        gt.get "/v5/$(gt.current-owner-type)/$(gt.current-owner)/repos" type=all page=$i per_page=100 |
            jq -r ".[] | .full_name"
        max_page=$(gt.resp.header "max_age")
    done
}

gt.repo.clone(){
    gt.repo.clone.ssh && return 0
    gt.repo.clone.https && return 0
    return $?
}

gt._owner(){
    repo=${owner:-$(http.dict.getput "current-repo")}
    if [[ "$repo" = */* ]]; then
        owner=${repo%%/*}
        repo=${repo##*/}
    fi

    echo "${owner}"
}

gt._repo(){
    repo=${owner:-$(http.dict.getput "current-repo")}
    if [[ "$repo" = */* ]]; then
        owner=${repo%%/*}
        repo=${repo##*/}
    fi 
}

gt._parse_owner_repo(){
    repo=${owner:-$(http.dict.getput "current-repo")}
    if [[ "$repo" = */* ]]; then
        owner=${repo%%/*}
        repo=${repo##*/}
    fi
}

gt.repo.clone.ssh(){
    @p '
        owner "Provide owner"
        repo "provide repo"
    '
    
    gt._parse_owner_repo
    git clone "git@github.com:$owner/$repo.git"
}

gt.repo.clone.https(){
    # parse owner/user
    gt._parse_owner_repo
    "git clone https://github.com/$owner/$repo.git"
}

gt.repo.fork(){
    : auto fork
}


<<A
How to use:
gt.current-owner lteam18
gt.repo.create "new" "abc" "cde"
A
gt.repo.create(){
    for i in "$@"; do
        "gt.$(gt.current-owner-type).repo.create" "$i"
    done
}

# arguments NAME
gt.user.repo.create(){
    @p '
        has_issues=true     = true false
        has_wiki=true       = true false
        access=private      = public private innerSource
    '

    local private
    case "$access" in
        public)  private=false;;
        private) private=true;;
    esac

    (
        http.body.add_by_name name has_issues has_wiki private
        gt.post "/v5/user/repos"
    )
}

# ORGANIZATION NAME
gt.organization.repo.create(){
    @p '
        has_issues=true     = true false
        has_wiki=true       = true false
        access=private      = public private innerSource
    '

    local public
    # TODO: bug?
    case "$access" in
        public)  public=0;;
        private) public=1;;
        innerSource) public=2;;
    esac

    (
        http.body.add_by_name name has_issues has_wiki public
        gt.post "/v5/orgs/$org/repos"
    )
}

# ENTERPRISE NAME
gt.enterprise.repo.create(){
    @p '
        has_issues=true     = true false
        has_wiki=true       = true false
        access=private      = public private innerSource
    '

    local private
    case "$access" in
        public)  private=0;;
        private) private=1;;
        innerSource) private=2;;
    esac

    if [ "$#" -eq 0 ]; then
        (
            http.body.add_by_name name has_issues has_wiki private
            gt.post "/v5/enterprises/$enterprise/repos"
        )
        return 0
    fi

    for name in "$@"; do
        (
            # http.body.add_by_name name has_issues has_wiki private
            # BODY="$(gt.json name has_issue has_wiki private)"

            # Default is to post body in json
            gt.post "/v5/enterprises/$enterprise/repos"
        )
    done
}


gt.repo.collaborators(){
    : Provide function, add from enterprise list
    : Provide function, remove from existing member list
}

gt.repo.collaborators.list(){
    :
    # TODO: page?
    # gt.multiget "/v5/repos/$owner/$repo/collaborators" -- ""
    # gt.get "/v5/repos/$owner/$repo/collaborators"
}

# gt.repo.member.add pull:edwinjhlee,work,adf push:work,adf admin:edwinjhlee
gt.repo.collaborators.add(){
    if [ "$1" == "-h" ]; then
        echo "Example: owner=d-y-innovations repo=demo-repo username=user1 permission=pull gt.repo.member.add"
        echo "Example: repo=d-y-innovations/demo-repo gt.repo.member.add pull:user1,user2 push:user3,user4 admin:user5"
        echo "Example: repo=d-y-innovations/demo-repo gt.repo.member.add pull:user1,user2 push:user3,user2 admin:user5"
    fi

    @p '
        username "Username Owner"
        permission=pull "Repo permission" = push push admin
    '

    (
        http.body.add "permission=$permission"
        gt.put "/v5/repos/$owner/$repo/collaborators/$username"
    )
}


# repo=lteam/vscode gt.repo.collaborators.remove chanchan hsn
# vscode.collaborators.remove chanchan hsn
<<A
gt.current-repo lteam/vscode
gt.repo.collaborators.remove chanchan hsn
A
gt.repo.collaborators.remove(){
    @p '
        owner "Repo Owner"
        repo "Repo name"
    '
    owner=$(gt.current-owner)
    repo=$(gt.current-repo)

    local username
    for username in "$@"; do
        gt.delete "/v5/repos/$owner/$repo/collaborators/$username"
    done
    # gt.delete "/v5/repos/${owner?:Provide owner}/${repo?:Provide Repo}/collaborators/${username:?Provider Collaborator}"
}


gt.repo.release.create(){
    :
}

gt.repo.release.get_or_create(){
    :
}

gt.repo.release.add(){
    :
}

gt.repo.release.remove(){
    :
}

gt.repo.release.attachment(){
    : Provide manager
}

gt.repo.release.attachment.list(){
    :
}

# Provide multiple files
gt.repo.release.attachment.upload(){
    :
}

# Delete the file in attachment list
gt.repo.release.attachment.remove(){
    :
}


gt.pr(){
    :
}

gt.pr.create(){
    :
}

gt.pr.list(){
    :
}

gt.pr.open(){
    :
}

gt.pr.status(){
    :
}

gt.pr.view(){
    :
}

gt.pr.checkout(){
    :
}

gt.pr.list-comment(){
    : list all of the comment in the terminal
}



