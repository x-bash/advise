# shellcheck shell=bash

# author:       Li Junhao           edwin.jh.lee@gmail.com    edwinjhlee.github.io
# maintainer:   Li Junhao

# json.generate abc=cde cea=asf

json.escape(){
    local a="${1:?Provide string}"
    a="$(echo "${a//$'\\'/\\}")"
    a="$(echo "${a//$'\n'/\\n}")"
    a="$(echo "${a//$'\t'/\\t}")"
    a="$(echo "${a//$'\b'/\\b}")"
    a="$(echo "${a//\"/\\\"}")"
    echo "\"$a\""
}


# Reference: https://github.com/jpmens/jo/blob/master/jo.md
json.gen(){
    printf "{\n"

    local key value
    local first=0
    for i in "$@"; do
        if [ "$first" -eq 0 ]; then
            first=1
        else
            printf ',\n'
        fi

        # if [ ]

        key=${i%%=*}
        if [ "$key" != "$i" ]; then
            value=${i#*=}

            if [[ "$value" =~ ^[+-]?[0-9]+(.[0-9]+)*$ ]]; then
                printf '  %s: %s' "$(json.escape "$key")" "$value"
            else
                printf '  %s: %s' "$key" "$(json.escape "$value")"
            fi
            continue
        fi

        key=${i%%\:*}
        value=${i#*\:}
        printf '  %s: %s' "$(json.escape "$key")" "$(json.escape "$value")"
    done
    printf "\n}"
}

json.args(){
    printf "{\n"
    local first=0
    for (( i=1; i<$#; i+=1 )); do

        if [ "$first" -eq 0 ]; then
            first=1
        else
            printf ',\n'
        fi

        local key=${!i}
        (( i++ ))
        local value=${!i}

        printf '  "%s": "%s"' "$key" "$value"
    done
    printf "\n}"
}

json.items(){
    local line
    while read -r line; do
        if [[ "$line" =~ \"name\"[[:space:]]*\:[[:space:]]*([[:print:]]+)$ ]]; then
            eval echo "${BASH_REMATCH[1]}"
        fi
    done
}

debug.init json

# json.extract \
#     \* errmsg -- errmsg -- \
#     \* reason -- reason

# json.extract .*.errmsg errmsg .reason reason

json_.search_pattern(){
    local i str="\["
    for i in "$@"; do
        if [ "$i" = "*" ]; then
            str+="[^,]+,"
            # str+="[[:print:]]+,"
            continue
        fi

        if [[ "$i" =~ [0-9]+ ]]; then
            str+="$i,"
            continue
        fi
        str+="\"$i\","
    done
    str="${str:0:((${#str}-1))}\]"
    echo "$str"
}

json_.extract_data_from_obj(){
    local line pat
    pat="${1:?Provide pattern}"
    while read -r line; do
        [[ ! "$line" =~ ^$pat ]] && continue
        if [ "$RAW" ] ; then
            eval echo -e "${line:(( ${#BASH_REMATCH[0]} + 1 ))}"
        else
            echo "${line:(( ${#BASH_REMATCH[0]} + 1 ))}"
        fi
        # echo "${s:1}"
    done
}

xrc std/str

# json.var .errorcode errocode .reason reason
# json.var .errorcode =errorcode .reason =reason
# json.var .errorcode =err <<< '{ "errorcode": 3 }'
# echo "$err"
json.var(){    local all line str args i result var
    all="$(awk "$(xrc.cat awk/JSON.awk)" -)"
    
    while [ "$#" -ge 2 ]; do
        i="$1"; var="$2"; shift 2
        str.split . "$i" args
        if [ -z "${args[0]}" ]; then
            str="$(json_.search_pattern "${args[@]:1}")"
        else
            str="$(json_.search_pattern "${args[@]}")"
        fi
        result="$(json_.extract_data_from_obj "$str" <<<"$all")"
        [[ "$var" = =* ]] && var=${var:1}
        eval "$var=\"\$result\""
    done
}

json.var.raw(){
    RAW=1 json.var "$@"
}

json.extract(){
    if [ "$#" -eq 0 ]; then
        return 1
    fi

    local line str
    str="$(json_.search_pattern "$@")"
    json.debug "Pattern: $str"
    awk -f "$(xrc.which awk/JSON.awk)" - | json_.extract_data_from_obj "$str"
}

json.extract.raw(){
    RAW=1 json.extract "$@"
}

# json.modify a=3 b=4 c=5
json.modify(){
    :
}

json.format(){
    :
}

json.var a= .[1].errorcode b= .[1].status
json.gen "{ err: $a, status: $b }"

json.obj '
a = {
    a: 3,
    b: 4
}
'

json.obj '
    a.a=12
    a.b=15
'

json.var a= a.a b=a.b

json.dump a

{
    a: { b: 1 }
}

a=$(jo 'arr.length()')

a=``arr.length()``

