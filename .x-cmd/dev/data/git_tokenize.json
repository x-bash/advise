{
"add"
:
{
"-n|--dry-run"
:
{
"#desc"
:
"dry run"
}
,
"-v|--verbose"
:
{
"#desc"
:
"be verbose"
}
,
"-i|--interactive"
:
{
"#desc"
:
"interactive picking"
}
,
"-p|--patch"
:
{
"#desc"
:
"select hunks interactively"
}
,
"-e|--edit"
:
{
"#desc"
:
"edit current diff and apply"
}
,
"-f|--force"
:
{
"#desc"
:
"allow adding otherwise ignored files"
}
,
"-u|--update"
:
{
"#desc"
:
"update tracked files"
}
,
"--renormalize"
:
{
"#desc"
:
"EOL of tracked files "
}
,
"-N|--intent-to-add"
:
{
"#desc"
:
"record only the fact that the path will be added later"
}
,
"-A|--all"
:
{
"#desc"
:
"add changes from all tracked and untracked files"
}
,
"--ignore-removal"
:
{
"#desc"
:
"ignore paths removed in the working tree "
}
,
"--refresh"
:
{
"#desc"
:
"don't add, only refresh the index"
}
,
"--ignore-errors"
:
{
"#desc"
:
"just skip files which cannot be added because of errors"
}
,
"--ignore-missing"
:
{
"#desc"
:
"check if - even missing - files are ignored in dry run"
}
,
"--chmod"
:
{
"#desc"
:
"x        override the executable bit of the listed files"
}
,
"--pathspec-from-file"
:
{
"#desc"
:
"x        override the executable bit of the listed files"
}
,
"--pathspec-file-nul"
:
{
"#desc"
:
"NUL character"
}
,
"#desc"
:
"Add file contents to the index"
}
,
"am"
:
{
"#desc"
:
"Apply a series of patches from a mailbox"
}
,
"archive"
:
{
"--format"
:
{
"#desc"
:
"archive format"
}
,
"--prefix"
:
{
"#desc"
:
"prepend prefix to each pathname in the archive"
}
,
"-o|--output"
:
{
"#desc"
:
"write the archive to this file"
}
,
"--worktree-attributes"
:
{
"#desc"
:
"write the archive to this file"
}
,
"-v|--verbose"
:
{
"#desc"
:
"report archived files on stderr"
}
,
"-0"
:
{
"#desc"
:
"store only"
}
,
"-1"
:
{
"#desc"
:
"compress faster"
}
,
"-9"
:
{
"#desc"
:
"compress better"
}
,
"-l|--list"
:
{
"#desc"
:
"list supported archive formats"
}
,
"--remote"
:
{
"#desc"
:
"retrieve the archive from remote repository "
}
,
"--exec"
:
{
"#desc"
:
"path to the remote git-upload-archive command"
}
,
"#desc"
:
"Create an archive of files from a named tree"
}
,
"bisect"
:
{
"#desc"
:
"Use binary search to find the commit that introduced a bug"
}
,
"branch"
:
{
"#desc"
:
"List, create, or delete branches"
}
,
"bundle"
:
{
"-v|--verbose"
:
{
"#desc"
:
"be verbose; must be placed before a subcommand"
}
,
"#desc"
:
"Move objects and refs by archive"
}
,
"checkout"
:
{
"-b"
:
{
"#desc"
:
"create and checkout a new branch"
}
,
"-B"
:
{
"#desc"
:
"create/reset and checkout a branch"
}
,
"-l"
:
{
"#desc"
:
"create reflog for new branch"
}
,
"--guess"
:
{
"#desc"
:
"second guess 'git checkout default)"
}
,
"--overlay"
:
{
"#desc"
:
"use overlay mode "
}
,
"-q|--quiet"
:
{
"#desc"
:
"suppress progress reporting"
}
,
"--recurse-submodules"
:
{
"#desc"
:
"suppress progress reporting"
}
,
"--progress"
:
{
"#desc"
:
"force progress reporting"
}
,
"-m|--merge"
:
{
"#desc"
:
"perform a 3-way merge with the new branch"
}
,
"--conflict"
:
{
"#desc"
:
"conflict style "
}
,
"-d|--detach"
:
{
"#desc"
:
"HEAD at named commit"
}
,
"-t|--track"
:
{
"#desc"
:
"set upstream info for new branch"
}
,
"-f|--force"
:
{
"#desc"
:
"force checkout "
}
,
"--orphan"
:
{
"#desc"
:
"force checkout "
}
,
"--overwrite-ignore"
:
{
"#desc"
:
"update ignored files "
}
,
"--ignore-other-worktrees"
:
{
"#desc"
:
"update ignored files "
}
,
"-2|--ours"
:
{
"#desc"
:
"checkout our version for unmerged files"
}
,
"-3|--theirs"
:
{
"#desc"
:
"checkout their version for unmerged files"
}
,
"-p|--patch"
:
{
"#desc"
:
"select hunks interactively"
}
,
"--ignore-skip-worktree-bits"
:
{
"#desc"
:
"select hunks interactively"
}
,
"--pathspec-from-file"
:
{
"#desc"
:
"select hunks interactively"
}
,
"--pathspec-file-nul"
:
{
"#desc"
:
"NUL character"
}
,
"#desc"
:
"Switch branches or restore working tree files"
}
,
"cherry-pick"
:
{
"--quit"
:
{
"#desc"
:
"end revert or cherry-pick sequence"
}
,
"--continue"
:
{
"#desc"
:
"resume revert or cherry-pick sequence"
}
,
"--abort"
:
{
"#desc"
:
"cancel revert or cherry-pick sequence"
}
,
"--skip"
:
{
"#desc"
:
"skip current commit and continue"
}
,
"--cleanup"
:
{
"#desc"
:
"how to strip spaces and #comments from message"
}
,
"-n|--no-commit"
:
{
"#desc"
:
"don't automatically commit"
}
,
"-e|--edit"
:
{
"#desc"
:
"edit the commit message"
}
,
"-s|--signoff"
:
{
"#desc"
:
"Signed-off-by:"
}
,
"-m|--mainline"
:
{
"#desc"
:
"Signed-off-by:"
}
,
"--rerere-autoupdate"
:
{
"#desc"
:
"update the index with reused conflict resolution if possible"
}
,
"--strategy"
:
{
"#desc"
:
"update the index with reused conflict resolution if possible"
}
,
"-X|--strategy-option"
:
{
"#desc"
:
"update the index with reused conflict resolution if possible"
}
,
"-S|--gpg-sign"
:
{
"#desc"
:
"update the index with reused conflict resolution if possible"
}
,
"-x"
:
{
"#desc"
:
"append commit name"
}
,
"--ff"
:
{
"#desc"
:
"allow fast-forward"
}
,
"--allow-empty"
:
{
"#desc"
:
"preserve initially empty commits"
}
,
"--allow-empty-message"
:
{
"#desc"
:
"preserve initially empty commits"
}
,
"--keep-redundant-commits"
:
{
"#desc"
:
"preserve initially empty commits"
}
,
"#desc"
:
"Apply the changes introduced by some existing commits"
}
,
"citool"
:
{
"#desc"
:
"Graphical alternative to git-commit"
}
,
"clean"
:
{
"-q|--quiet"
:
{
"#desc"
:
"do not print names of files removed"
}
,
"-n|--dry-run"
:
{
"#desc"
:
"dry run"
}
,
"-f|--force"
:
{
"#desc"
:
"force"
}
,
"-i|--interactive"
:
{
"#desc"
:
"interactive cleaning"
}
,
"-d"
:
{
"#desc"
:
"remove whole directories"
}
,
"-e|--exclude"
:
{
"#desc"
:
"remove whole directories"
}
,
"-x"
:
{
"#desc"
:
"remove ignored files, too"
}
,
"-X"
:
{
"#desc"
:
"remove only ignored files"
}
,
"#desc"
:
"Remove untracked files from the working tree"
}
,
"commit"
:
{
"#desc"
:
"Record changes to the repository"
}
,
"describe"
:
{
"--contains"
:
{
"#desc"
:
"find the tag that comes after the commit"
}
,
"--debug"
:
{
"#desc"
:
"debug search strategy on stderr"
}
,
"--all"
:
{
"#desc"
:
"use any ref"
}
,
"--tags"
:
{
"#desc"
:
"use any tag, even unannotated"
}
,
"--long"
:
{
"#desc"
:
"always use long format"
}
,
"--first-parent"
:
{
"#desc"
:
"only follow first parent"
}
,
"--abbrev[=gits"
:
{
"#desc"
:
"SHA-1s"
}
,
"--exact-match"
:
{
"#desc"
:
"only output exact matches"
}
,
"--candidates"
:
{
"#desc"
:
"st recent tags "
}
,
"--match"
:
{
"#desc"
:
"only consider tags matching "
}
,
"--exclude"
:
{
"#desc"
:
"do not consider tags matching "
}
,
"--always"
:
{
"#desc"
:
"show abbreviated commit object as fallback"
}
,
"--dirty[="
:
{
"#desc"
:
"dirty working tree "
}
,
"--broken[="
:
{
"#desc"
:
"broken working tree "
}
,
"#desc"
:
"Give an object a human readable name based on an available ref"
}
,
"diff"
:
{
"#desc"
:
"Show changes between commits, commit and working tree, etc"
}
,
"fetch"
:
{
"-v|--verbose"
:
{
"#desc"
:
"be more verbose"
}
,
"-q|--quiet"
:
{
"#desc"
:
"be more quiet"
}
,
"--all"
:
{
"#desc"
:
"fetch from all remotes"
}
,
"--set-upstream"
:
{
"#desc"
:
"set upstream for git pull/fetch"
}
,
"-a|--append"
:
{
"#desc"
:
"append to .git/FETCH_HEAD instead of overwriting"
}
,
"--upload-pack"
:
{
"#desc"
:
"ath to upload pack on remote end"
}
,
"-f|--force"
:
{
"#desc"
:
"force overwrite of local reference"
}
,
"-m|--multiple"
:
{
"#desc"
:
"fetch from multiple remotes"
}
,
"-t|--tags"
:
{
"#desc"
:
"fetch all tags and associated objects"
}
,
"-n"
:
{
"#desc"
:
"do not fetch all tags "
}
,
"-j|--jobs"
:
{
"#desc"
:
"number of submodules fetched in parallel"
}
,
"-p|--prune"
:
{
"#desc"
:
"prune remote-tracking branches no longer on remote"
}
,
"-P|--prune-tags"
:
{
"#desc"
:
"prune local tags no longer on remote and clobber changed tags"
}
,
"--recurse-submodules"
:
{
"#desc"
:
"prune local tags no longer on remote and clobber changed tags"
}
,
"--dry-run"
:
{
"#desc"
:
"dry run"
}
,
"-k|--keep"
:
{
"#desc"
:
"keep downloaded pack"
}
,
"-u|--update-head-ok"
:
{
"#desc"
:
"HEAD ref"
}
,
"--progress"
:
{
"#desc"
:
"force progress reporting"
}
,
"--depth"
:
{
"#desc"
:
"deepen history of shallow clone"
}
,
"--shallow-since"
:
{
"#desc"
:
"deepen history of shallow clone"
}
,
"--shallow-exclude"
:
{
"#desc"
:
"deepen history of shallow clone"
}
,
"--deepen"
:
{
"#desc"
:
"deepen history of shallow clone"
}
,
"--unshallow"
:
{
"#desc"
:
"convert to a complete repository"
}
,
"--update-shallow"
:
{
"#desc"
:
"accept refs that update .git/shallow"
}
,
"--refmap"
:
{
"#desc"
:
"specify fetch refmap"
}
,
"-o|--server-option"
:
{
"#desc"
:
"specify fetch refmap"
}
,
"-4|--ipv4"
:
{
"#desc"
:
"IPv4 addresses only"
}
,
"-6|--ipv6"
:
{
"#desc"
:
"IPv6 addresses only"
}
,
"--negotiation-tip"
:
{
"#desc"
:
"IPv6 addresses only"
}
,
"--filter"
:
{
"#desc"
:
"object filtering"
}
,
"--auto-gc"
:
{
"#desc"
:
"run 'gc --auto' after fetching"
}
,
"--show-forced-updates"
:
{
"#desc"
:
"run 'gc --auto' after fetching"
}
,
"--write-commit-graph"
:
{
"#desc"
:
"write the commit-graph after fetching"
}
,
"#desc"
:
"Download objects and refs from another repository"
}
,
"format-patch"
:
{
"-n|--numbered"
:
{
"#desc"
:
"use  even with a single patch"
}
,
"-N|--no-numbered"
:
{
"#desc"
:
"use  even with multiple patches"
}
,
"-s|--signoff"
:
{
"#desc"
:
"Signed-off-by:"
}
,
"--stdout"
:
{
"#desc"
:
"print patches to standard out"
}
,
"--cover-letter"
:
{
"#desc"
:
"generate a cover letter"
}
,
"--numbered-files"
:
{
"#desc"
:
"use simple number sequence for output file names"
}
,
"--suffix"
:
{
"#desc"
:
"stead of '.patch'"
}
,
"--start-number"
:
{
"#desc"
:
"stead of 1"
}
,
"-v|--reroll-count"
:
{
"#desc"
:
"stead of 1"
}
,
"--rfc"
:
{
"#desc"
:
"Use "
}
,
"--cover-from-description"
:
{
"#desc"
:
"Use "
}
,
"--subject-prefix"
:
{
"#desc"
:
"Use "
}
,
"-o|--output-directory"
:
{
"#desc"
:
"Use "
}
,
"-k|--keep-subject"
:
{
"#desc"
:
"don't strip/add "
}
,
"--no-binary"
:
{
"#desc"
:
"don't output binary diffs"
}
,
"--zero-commit"
:
{
"#desc"
:
"From header"
}
,
"--ignore-if-in-upstream"
:
{
"#desc"
:
"From header"
}
,
"-p|--no-stat"
:
{
"#desc"
:
"show patch format instead of default "
}
,
"--add-header"
:
{
"#desc"
:
"show patch format instead of default "
}
,
"--to"
:
{
"#desc"
:
"To: header"
}
,
"--cc"
:
{
"#desc"
:
"Cc: header"
}
,
"--from[=r"
:
{
"#desc"
:
"committer ident if absent)"
}
,
"--in-reply-to"
:
{
"#desc"
:
"committer ident if absent)"
}
,
"--attach"
:
{
"#desc"
:
"committer ident if absent)"
}
,
"--inline"
:
{
"#desc"
:
"committer ident if absent)"
}
,
"--thread[="
:
{
"#desc"
:
"enable message threading, styles: shallow, deep"
}
,
"--signature"
:
{
"#desc"
:
"enable message threading, styles: shallow, deep"
}
,
"--base"
:
{
"#desc"
:
"dd prerequisite tree info to the patch series"
}
,
"--signature-file"
:
{
"#desc"
:
"dd prerequisite tree info to the patch series"
}
,
"-q|--quiet"
:
{
"#desc"
:
"don't print the patch filenames"
}
,
"--progress"
:
{
"#desc"
:
"show progress while generating patches"
}
,
"--interdiff"
:
{
"#desc"
:
"cover letter or single patch"
}
,
"--range-diff"
:
{
"#desc"
:
"cover letter or single patch"
}
,
"--creation-factor"
:
{
"#desc"
:
"cover letter or single patch"
}
,
"#desc"
:
"Prepare patches for e-mail submission"
}
,
"gc"
:
{
"#desc"
:
"Cleanup unnecessary files and optimize the local repository"
}
,
"gitk"
:
{
"#desc"
:
"The Git repository browser"
}
,
"grep"
:
{
"--cached"
:
{
"#desc"
:
"search in index instead of in the work tree"
}
,
"--no-index"
:
{
"#desc"
:
"find in contents not managed by git"
}
,
"--untracked"
:
{
"#desc"
:
"search in both tracked and untracked files"
}
,
"--exclude-standard"
:
{
"#desc"
:
"ignore files specified via '.gitignore'"
}
,
"--recurse-submodules"
:
{
"#desc"
:
"recursively search in each submodule"
}
,
"-v|--invert-match"
:
{
"#desc"
:
"show non-matching lines"
}
,
"-i|--ignore-case"
:
{
"#desc"
:
"case insensitive matching"
}
,
"-w|--word-regexp"
:
{
"#desc"
:
"match patterns only at word boundaries"
}
,
"-a|--text"
:
{
"#desc"
:
"process binary files as text"
}
,
"-I"
:
{
"#desc"
:
"don't match patterns in binary files"
}
,
"--textconv"
:
{
"#desc"
:
"process binary files with textconv filters"
}
,
"-r|--recursive"
:
{
"#desc"
:
"search in subdirectories "
}
,
"--max-depth"
:
{
"#desc"
:
"vels"
}
,
"-E|--extended-regexp"
:
{
"#desc"
:
"vels"
}
,
"-G|--basic-regexp"
:
{
"#desc"
:
"POSIX regular expressions "
}
,
"-F|--fixed-strings"
:
{
"#desc"
:
"interpret patterns as fixed strings"
}
,
"-P|--perl-regexp"
:
{
"#desc"
:
"Perl-compatible regular expressions"
}
,
"-n|--line-number"
:
{
"#desc"
:
"show line numbers"
}
,
"--column"
:
{
"#desc"
:
"show column number of first match"
}
,
"-h"
:
{
"#desc"
:
"don't show filenames"
}
,
"-H"
:
{
"#desc"
:
"show filenames"
}
,
"--full-name"
:
{
"#desc"
:
"show filenames relative to top directory"
}
,
"-l|--files-with-matches"
:
{
"#desc"
:
"show filenames relative to top directory"
}
,
"--name-only"
:
{
"#desc"
:
"synonym for --files-with-matches"
}
,
"-L|--files-without-match"
:
{
"#desc"
:
"synonym for --files-with-matches"
}
,
"-z|--null"
:
{
"#desc"
:
"NUL after filenames"
}
,
"-o|--only-matching"
:
{
"#desc"
:
"show only matching parts of a line"
}
,
"-c|--count"
:
{
"#desc"
:
"show the number of matches instead of matching lines"
}
,
"--color[="
:
{
"#desc"
:
"highlight matches"
}
,
"--break"
:
{
"#desc"
:
"print empty line between matches from different files"
}
,
"--heading"
:
{
"#desc"
:
"show filename only once above matches from same file"
}
,
"-C|--context"
:
{
"#desc"
:
"ntext lines before and after matches"
}
,
"-B|--before-context"
:
{
"#desc"
:
"ntext lines before and after matches"
}
,
"-A|--after-context"
:
{
"#desc"
:
"ntext lines before and after matches"
}
,
"--threads"
:
{
"#desc"
:
"rker threads"
}
,
"-NUM"
:
{
"#desc"
:
"NUM"
}
,
"-p|--show-function"
:
{
"#desc"
:
"show a line with the function name before matches"
}
,
"-W|--function-context"
:
{
"#desc"
:
"show a line with the function name before matches"
}
,
"-f"
:
{
"#desc"
:
"read patterns from file"
}
,
"-e"
:
{
"#desc"
:
"match "
}
,
"--and"
:
{
"#desc"
:
"combine patterns specified with -e"
}
,
"--or"
:
{
"#desc"
:
"combine patterns specified with -e"
}
,
"--not"
:
{
"#desc"
:
"combine patterns specified with -e"
}
,
"-q|--quiet"
:
{
"#desc"
:
"indicate hit with exit status without output"
}
,
"--all-match"
:
{
"#desc"
:
"show only matches from files that match all patterns"
}
,
"-O|--open-files-in-pager"
:
{
"#desc"
:
"show only matches from files that match all patterns"
}
,
"--ext-grep"
:
{
"#desc"
:
"allow calling of grep"
}
,
"#desc"
:
"Print lines matching a pattern"
}
,
"gui"
:
{
"#desc"
:
"A portable graphical interface to Git"
}
,
"init"
:
{
"--template"
:
""
,
"--bare"
:
{
"#desc"
:
"create a bare repository"
}
,
"--shared"
:
{
"#desc"
:
"create a bare repository"
}
,
"-q|--quiet"
:
{
"#desc"
:
"be quiet"
}
,
"--separate-git-dir"
:
{
"#desc"
:
"be quiet"
}
,
"#desc"
:
"Create an empty Git repository or reinitialize an existing one"
}
,
"log"
:
{
"-q|--quiet"
:
{
"#desc"
:
"suppress diff output"
}
,
"--source"
:
{
"#desc"
:
"show source"
}
,
"--use-mailmap"
:
{
"#desc"
:
"Use mail map file"
}
,
"--decorate-refs"
:
{
"#desc"
:
"Use mail map file"
}
,
"--decorate-refs-exclude"
:
{
"#desc"
:
"Use mail map file"
}
,
"--decorate"
:
{
"#desc"
:
"decorate options"
}
,
"-L"
:
{
"#desc"
:
"Process line range n,m in file, counting from 1"
}
,
"#desc"
:
"Show commit logs"
}
,
"merge"
:
{
"#desc"
:
"Join two or more development histories together"
}
,
"mv"
:
{
"-v|--verbose"
:
{
"#desc"
:
"be verbose"
}
,
"-n|--dry-run"
:
{
"#desc"
:
"dry run"
}
,
"-f|--force"
:
{
"#desc"
:
"force move/rename even if target exists"
}
,
"-k"
:
{
"#desc"
:
"skip move/rename errors"
}
,
"#desc"
:
"Move or rename a file, a directory, or a symlink"
}
,
"notes"
:
{
"--ref"
:
{
"#desc"
:
"use notes from "
}
,
"#desc"
:
"Add or inspect object notes"
}
,
"pull"
:
{
"-v|--verbose"
:
{
"#desc"
:
"be more verbose"
}
,
"-q|--quiet"
:
{
"#desc"
:
"be more quiet"
}
,
"--progress"
:
{
"#desc"
:
"force progress reporting"
}
,
"--recurse-submodules"
:
{
"#desc"
:
"force progress reporting"
}
,
"-r|--rebase"
:
{
"#desc"
:
"force progress reporting"
}
,
"-n"
:
{
"#desc"
:
"do not show a diffstat at the end of the merge"
}
,
"--stat"
:
{
"#desc"
:
"show a diffstat at the end of the merge"
}
,
"--log[=ntries"
:
{
"#desc"
:
"from shortlog to merge commit message"
}
,
"--signoff"
:
{
"#desc"
:
"Signed-off-by:"
}
,
"--squash"
:
{
"#desc"
:
"create a single commit instead of doing a merge"
}
,
"--commit"
:
{
"#desc"
:
"perform a commit if the merge succeeds "
}
,
"--edit"
:
{
"#desc"
:
"edit message before committing"
}
,
"--cleanup"
:
{
"#desc"
:
"how to strip spaces and #comments from message"
}
,
"--ff"
:
{
"#desc"
:
"allow fast-forward"
}
,
"--ff-only"
:
{
"#desc"
:
"abort if fast-forward is not possible"
}
,
"--verify-signatures"
:
{
"#desc"
:
"GPG signature"
}
,
"--autostash"
:
{
"#desc"
:
"automatically stash/stash pop before and after rebase"
}
,
"-s|--strategy"
:
{
"#desc"
:
"automatically stash/stash pop before and after rebase"
}
,
"-X|--strategy-option"
:
{
"#desc"
:
"automatically stash/stash pop before and after rebase"
}
,
"-S|--gpg-sign"
:
{
"#desc"
:
"automatically stash/stash pop before and after rebase"
}
,
"--allow-unrelated-histories"
:
{
"#desc"
:
"automatically stash/stash pop before and after rebase"
}
,
"--all"
:
{
"#desc"
:
"fetch from all remotes"
}
,
"-a|--append"
:
{
"#desc"
:
"append to .git/FETCH_HEAD instead of overwriting"
}
,
"--upload-pack"
:
{
"#desc"
:
"ath to upload pack on remote end"
}
,
"-f|--force"
:
{
"#desc"
:
"force overwrite of local branch"
}
,
"-t|--tags"
:
{
"#desc"
:
"fetch all tags and associated objects"
}
,
"-p|--prune"
:
{
"#desc"
:
"prune remote-tracking branches no longer on remote"
}
,
"-j|--jobs[="
:
{
"#desc"
:
"number of submodules pulled in parallel"
}
,
"--dry-run"
:
{
"#desc"
:
"dry run"
}
,
"-k|--keep"
:
{
"#desc"
:
"keep downloaded pack"
}
,
"--depth"
:
{
"#desc"
:
"deepen history of shallow clone"
}
,
"--unshallow"
:
{
"#desc"
:
"convert to a complete repository"
}
,
"--update-shallow"
:
{
"#desc"
:
"accept refs that update .git/shallow"
}
,
"--refmap"
:
{
"#desc"
:
"specify fetch refmap"
}
,
"-4|--ipv4"
:
{
"#desc"
:
"IPv4 addresses only"
}
,
"-6|--ipv6"
:
{
"#desc"
:
"IPv6 addresses only"
}
,
"--show-forced-updates"
:
{
"#desc"
:
"IPv6 addresses only"
}
,
"--set-upstream"
:
{
"#desc"
:
"set upstream for git pull/fetch"
}
,
"#desc"
:
"Fetch from and integrate with another repository or a local branch"
}
,
"push"
:
{
"-v|--verbose"
:
{
"#desc"
:
"be more verbose"
}
,
"-q|--quiet"
:
{
"#desc"
:
"be more quiet"
}
,
"--repo"
:
{
"#desc"
:
"repository"
}
,
"--all"
:
{
"#desc"
:
"push all refs"
}
,
"--mirror"
:
{
"#desc"
:
"mirror all refs"
}
,
"-d|--delete"
:
{
"#desc"
:
"delete refs"
}
,
"--tags"
:
{
"#desc"
:
"push tags "
}
,
"-n|--dry-run"
:
{
"#desc"
:
"dry run"
}
,
"--porcelain"
:
{
"#desc"
:
"machine-readable output"
}
,
"-f|--force"
:
{
"#desc"
:
"force updates"
}
,
"--force-with-lease"
:
{
"#desc"
:
"force updates"
}
,
"--recurse-submodules"
:
{
"#desc"
:
"force updates"
}
,
"--thin"
:
{
"#desc"
:
"use thin pack"
}
,
"--receive-pack"
:
{
"#desc"
:
"use thin pack"
}
,
"--exec"
:
{
"#desc"
:
"use thin pack"
}
,
"-u|--set-upstream"
:
{
"#desc"
:
"set upstream for git pull/status"
}
,
"--progress"
:
{
"#desc"
:
"force progress reporting"
}
,
"--prune"
:
{
"#desc"
:
"prune locally removed refs"
}
,
"--no-verify"
:
{
"#desc"
:
"bypass pre-push hook"
}
,
"--follow-tags"
:
{
"#desc"
:
"push missing but relevant tags"
}
,
"--signed"
:
{
"#desc"
:
"push missing but relevant tags"
}
,
"--atomic"
:
{
"#desc"
:
"request atomic transaction on remote side"
}
,
"-o|--push-option"
:
{
"#desc"
:
"request atomic transaction on remote side"
}
,
"-4|--ipv4"
:
{
"#desc"
:
"IPv4 addresses only"
}
,
"-6|--ipv6"
:
{
"#desc"
:
"IPv6 addresses only"
}
,
"#desc"
:
"Update remote refs along with associated objects"
}
,
"rebase"
:
{
"#desc"
:
"Reapply commits on top of another base tip"
}
,
"reset"
:
{
"-q|--quiet"
:
{
"#desc"
:
"be quiet, only report errors"
}
,
"--mixed"
:
{
"#desc"
:
"HEAD and index"
}
,
"--soft"
:
{
"#desc"
:
"HEAD"
}
,
"--hard"
:
{
"#desc"
:
"HEAD, index and working tree"
}
,
"--merge"
:
{
"#desc"
:
"HEAD, index and working tree"
}
,
"--keep"
:
{
"#desc"
:
"HEAD but keep local changes"
}
,
"--recurse-submodules"
:
{
"#desc"
:
"HEAD but keep local changes"
}
,
"-p|--patch"
:
{
"#desc"
:
"select hunks interactively"
}
,
"-N|--intent-to-add"
:
{
"#desc"
:
"record only the fact that removed paths will be added later"
}
,
"--pathspec-from-file"
:
{
"#desc"
:
"record only the fact that removed paths will be added later"
}
,
"--pathspec-file-nul"
:
{
"#desc"
:
"NUL character"
}
,
"#desc"
:
"Reset current HEAD to the specified state"
}
,
"restore"
:
{
"-s|--source"
:
""
,
"-S|--staged"
:
{
"#desc"
:
"restore the index"
}
,
"-W|--worktree"
:
{
"#desc"
:
"restore the working tree "
}
,
"--ignore-unmerged"
:
{
"#desc"
:
"ignore unmerged entries"
}
,
"--overlay"
:
{
"#desc"
:
"use overlay mode"
}
,
"-q|--quiet"
:
{
"#desc"
:
"suppress progress reporting"
}
,
"--recurse-submodules"
:
{
"#desc"
:
"suppress progress reporting"
}
,
"--progress"
:
{
"#desc"
:
"force progress reporting"
}
,
"-m|--merge"
:
{
"#desc"
:
"perform a 3-way merge with the new branch"
}
,
"--conflict"
:
{
"#desc"
:
"conflict style "
}
,
"-2|--ours"
:
{
"#desc"
:
"checkout our version for unmerged files"
}
,
"-3|--theirs"
:
{
"#desc"
:
"checkout their version for unmerged files"
}
,
"-p|--patch"
:
{
"#desc"
:
"select hunks interactively"
}
,
"--ignore-skip-worktree-bits"
:
{
"#desc"
:
"select hunks interactively"
}
,
"--pathspec-from-file"
:
{
"#desc"
:
"select hunks interactively"
}
,
"--pathspec-file-nul"
:
{
"#desc"
:
"NUL character"
}
,
"#desc"
:
"Restore working tree files"
}
,
"revert"
:
{
"--quit"
:
{
"#desc"
:
"end revert or cherry-pick sequence"
}
,
"--continue"
:
{
"#desc"
:
"resume revert or cherry-pick sequence"
}
,
"--abort"
:
{
"#desc"
:
"cancel revert or cherry-pick sequence"
}
,
"--skip"
:
{
"#desc"
:
"skip current commit and continue"
}
,
"--cleanup"
:
{
"#desc"
:
"how to strip spaces and #comments from message"
}
,
"-n|--no-commit"
:
{
"#desc"
:
"don't automatically commit"
}
,
"-e|--edit"
:
{
"#desc"
:
"edit the commit message"
}
,
"-s|--signoff"
:
{
"#desc"
:
"Signed-off-by:"
}
,
"-m|--mainline"
:
{
"#desc"
:
"Signed-off-by:"
}
,
"--rerere-autoupdate"
:
{
"#desc"
:
"update the index with reused conflict resolution if possible"
}
,
"--strategy"
:
{
"#desc"
:
"update the index with reused conflict resolution if possible"
}
,
"-X|--strategy-option"
:
{
"#desc"
:
"update the index with reused conflict resolution if possible"
}
,
"-S|--gpg-sign"
:
{
"#desc"
:
"update the index with reused conflict resolution if possible"
}
,
"#desc"
:
"Revert some existing commits"
}
,
"rm"
:
{
"-n|--dry-run"
:
{
"#desc"
:
"dry run"
}
,
"-q|--quiet"
:
{
"#desc"
:
"do not list removed files"
}
,
"--cached"
:
{
"#desc"
:
"only remove from the index"
}
,
"-f|--force"
:
{
"#desc"
:
"override the up-to-date check"
}
,
"-r"
:
{
"#desc"
:
"allow recursive removal"
}
,
"--ignore-unmatch"
:
{
"#desc"
:
"exit with a zero status even if nothing matched"
}
,
"#desc"
:
"Remove files from the working tree and from the index"
}
,
"shortlog"
:
{
"-c|--committer"
:
{
"#desc"
:
"Group by committer rather than author"
}
,
"-n|--numbered"
:
{
"#desc"
:
"sort output according to the number of commits per author"
}
,
"-s|--summary"
:
{
"#desc"
:
"Suppress commit descriptions, only provides commit count"
}
,
"-e|--email"
:
{
"#desc"
:
"Show the email address of each author"
}
,
"-w["
:
{
"#desc"
:
"Show the email address of each author"
}
,
"#desc"
:
"Summarize 'git log' output"
}
,
"show"
:
{
"-q|--quiet"
:
{
"#desc"
:
"suppress diff output"
}
,
"--source"
:
{
"#desc"
:
"show source"
}
,
"--use-mailmap"
:
{
"#desc"
:
"Use mail map file"
}
,
"--decorate-refs"
:
{
"#desc"
:
"Use mail map file"
}
,
"--decorate-refs-exclude"
:
{
"#desc"
:
"Use mail map file"
}
,
"--decorate"
:
{
"#desc"
:
"decorate options"
}
,
"-L"
:
{
"#desc"
:
"Process line range n,m in file, counting from 1"
}
,
"#desc"
:
"Show various types of objects"
}
,
"sparse-checkout"
:
{
"#desc"
:
"Initialize and modify the sparse-checkout"
}
,
"stash"
:
{
"#desc"
:
"Stash the changes in a dirty working directory away"
}
,
"status"
:
{
"#desc"
:
"Show the working tree status"
}
,
"submodule"
:
{
"#desc"
:
"Initialize, update or inspect submodules"
}
,
"switch"
:
{
"-c|--create"
:
""
,
"-C|--force-create"
:
""
,
"--guess"
:
{
"#desc"
:
"second guess \\'git switch \\'"
}
,
"--discard-changes"
:
{
"#desc"
:
"throw away local modifications"
}
,
"-q|--quiet"
:
{
"#desc"
:
"suppress progress reporting"
}
,
"--recurse-submodules"
:
{
"#desc"
:
"suppress progress reporting"
}
,
"--progress"
:
{
"#desc"
:
"force progress reporting"
}
,
"-m|--merge"
:
{
"#desc"
:
"perform a 3-way merge with the new branch"
}
,
"--conflict"
:
{
"#desc"
:
"conflict style "
}
,
"-d|--detach"
:
{
"#desc"
:
"HEAD at named commit"
}
,
"-t|--track"
:
{
"#desc"
:
"set upstream info for new branch"
}
,
"-f|--force"
:
{
"#desc"
:
"force checkout "
}
,
"--orphan"
:
{
"#desc"
:
"force checkout "
}
,
"--overwrite-ignore"
:
{
"#desc"
:
"update ignored files "
}
,
"--ignore-other-worktrees"
:
{
"#desc"
:
"update ignored files "
}
,
"#desc"
:
"Switch branches"
}
,
"tag"
:
{
"-l|--list"
:
{
"#desc"
:
"list tag names"
}
,
"-n[nes"
:
{
"#desc"
:
"of each tag message"
}
,
"-d|--delete"
:
{
"#desc"
:
"delete tags"
}
,
"-v|--verify"
:
{
"#desc"
:
"verify tags"
}
,
"-a|--annotate"
:
{
"#desc"
:
"annotated tag, needs a message"
}
,
"-m|--message"
:
{
"#desc"
:
"annotated tag, needs a message"
}
,
"-F|--file"
:
{
"#desc"
:
"read message from file"
}
,
"-e|--edit"
:
{
"#desc"
:
"force edit of tag message"
}
,
"-s|--sign"
:
{
"#desc"
:
"GPG-signed tag"
}
,
"--cleanup"
:
{
"#desc"
:
"how to strip spaces and #comments from message"
}
,
"-u|--local-user"
:
{
"#desc"
:
"how to strip spaces and #comments from message"
}
,
"-f|--force"
:
{
"#desc"
:
"replace the tag if exists"
}
,
"--create-reflog"
:
{
"#desc"
:
"create a reflog"
}
,
"--column[="
:
{
"#desc"
:
"show tag list in columns"
}
,
"--contains"
:
{
"#desc"
:
"print only tags that contain the commit"
}
,
"--no-contains"
:
{
"#desc"
:
"print only tags that contain the commit"
}
,
"--merged"
:
{
"#desc"
:
"print only tags that are merged"
}
,
"--no-merged"
:
{
"#desc"
:
"rint only tags that are not merged"
}
,
"--sort"
:
{
"#desc"
:
"field name to sort on"
}
,
"--points-at"
:
{
"#desc"
:
"rint only tags of the object"
}
,
"--format"
:
{
"#desc"
:
"format to use for the output"
}
,
"--color[="
:
{
"#desc"
:
"respect format colors"
}
,
"-i|--ignore-case"
:
{
"#desc"
:
"sorting and filtering are case insensitive"
}
,
"#desc"
:
"Create, list, delete or verify a tag object signed with GPG"
}
,
"worktree"
:
{
"#desc"
:
"Manage multiple working trees"
}
,
"config"
:
{
"--global"
:
{
"#desc"
:
"use global config file"
}
,
"--system"
:
{
"#desc"
:
"use system config file"
}
,
"--local"
:
{
"#desc"
:
"use repository config file"
}
,
"--worktree"
:
{
"#desc"
:
"use per-worktree config file"
}
,
"-f|--file"
:
{
"#desc"
:
"use given config file"
}
,
"--blob"
:
{
"#desc"
:
"read config from given blob object"
}
,
"--get"
:
{
"#desc"
:
"get value: name "
}
,
"--get-all"
:
{
"#desc"
:
"get all values: key "
}
,
"--get-regexp"
:
{
"#desc"
:
"get values for regexp: name-regex "
}
,
"--get-urlmatch"
:
{
"#desc"
:
"URL: section URL"
}
,
"--replace-all"
:
{
"#desc"
:
"replace all matching variables: name value "
}
,
"--add"
:
{
"#desc"
:
"add a new variable: name value"
}
,
"--unset"
:
{
"#desc"
:
"remove a variable: name "
}
,
"--unset-all"
:
{
"#desc"
:
"remove all matches: name "
}
,
"--rename-section"
:
{
"#desc"
:
"rename section: old-name new-name"
}
,
"--remove-section"
:
{
"#desc"
:
"remove a section: name"
}
,
"-l|--list"
:
{
"#desc"
:
"list all"
}
,
"-e|--edit"
:
{
"#desc"
:
"open an editor"
}
,
"--get-color"
:
{
"#desc"
:
"find the color configured: slot "
}
,
"--get-colorbool"
:
{
"#desc"
:
"find the color setting: slot "
}
,
"-t|--type"
:
{
"#desc"
:
"value is given this type"
}
,
"--bool"
:
{
"#desc"
:
"value is \"true\" or \"false \""
}
,
"--int"
:
{
"#desc"
:
"value is decimal number"
}
,
"--bool-or-int"
:
{
"#desc"
:
"value is --bool or --int"
}
,
"--path"
:
{
"#desc"
:
"value is a path "
}
,
"--expiry-date"
:
{
"#desc"
:
"value is an expiry date"
}
,
"-z|--null"
:
{
"#desc"
:
"NUL byte"
}
,
"--name-only"
:
{
"#desc"
:
"show variable names only"
}
,
"--includes"
:
{
"#desc"
:
"respect include directives on lookup"
}
,
"--show-origin"
:
{
"#desc"
:
"show origin of config "
}
,
"--default"
:
{
"#desc"
:
"with --get, use default value when missing entry"
}
,
"#desc"
:
"Get and set repository or global options"
}
,
"fast-export"
:
{
"--progress"
:
{
"#desc"
:
"jects"
}
,
"--signed-tags"
:
{
"#desc"
:
"elect handling of signed tags"
}
,
"--tag-of-filtered-object"
:
{
"#desc"
:
"elect handling of signed tags"
}
,
"--reencode"
:
{
"#desc"
:
"select handling of commit messages in an alternate encoding"
}
,
"--export-marks"
:
{
"#desc"
:
"select handling of commit messages in an alternate encoding"
}
,
"--import-marks"
:
{
"#desc"
:
"select handling of commit messages in an alternate encoding"
}
,
"--import-marks-if-exists"
:
{
"#desc"
:
"select handling of commit messages in an alternate encoding"
}
,
"--fake-missing-tagger"
:
{
"#desc"
:
"select handling of commit messages in an alternate encoding"
}
,
"--full-tree"
:
{
"#desc"
:
"Output full tree for each commit"
}
,
"--use-done-feature"
:
{
"#desc"
:
"Use the done feature to terminate the stream"
}
,
"--no-data"
:
{
"#desc"
:
"Skip output of blob data"
}
,
"--refspec"
:
{
"#desc"
:
"Apply refspec to exported refs"
}
,
"--anonymize"
:
{
"#desc"
:
"anonymize output"
}
,
"--reference-excluded-parents"
:
{
"#desc"
:
"anonymize output"
}
,
"--show-original-ids"
:
{
"#desc"
:
"Show original object ids of blobs/commits"
}
,
"--mark-tags"
:
{
"#desc"
:
"Label tags with mark ids"
}
,
"#desc"
:
"Git data exporter"
}
,
"fast-import"
:
{
"#desc"
:
"Backend for fast Git data importers"
}
,
"mergetool"
:
{
"#desc"
:
"Run merge conflict resolution tools to resolve merge conflicts"
}
,
"pack-refs"
:
{
"--all"
:
{
"#desc"
:
"pack everything"
}
,
"--prune"
:
{
"#desc"
:
"prune loose refs "
}
,
"#desc"
:
"Pack heads and tags for efficient repository access"
}
,
"prune"
:
{
"-n|--dry-run"
:
{
"#desc"
:
"do not remove, show only"
}
,
"-v|--verbose"
:
{
"#desc"
:
"report pruned objects"
}
,
"--progress"
:
{
"#desc"
:
"show progress"
}
,
"--expire"
:
{
"#desc"
:
"show progress"
}
,
"--exclude-promisor-objects"
:
{
"#desc"
:
"show progress"
}
,
"#desc"
:
"Prune all unreachable objects from the object database"
}
,
"reflog"
:
{
"#desc"
:
"Manage reflog information"
}
,
"remote"
:
{
"-v|--verbose"
:
{
"#desc"
:
"be verbose; must be placed before a subcommand"
}
,
"#desc"
:
"Manage set of tracked repositories"
}
,
"repack"
:
{
"-a"
:
{
"#desc"
:
"pack everything in a single pack"
}
,
"-A"
:
{
"#desc"
:
"same as -a, and turn unreachable objects loose"
}
,
"-d"
:
{
"#desc"
:
"remove redundant packs, and run git-prune-packed"
}
,
"-f"
:
{
"#desc"
:
"pass --no-reuse-delta to git-pack-objects"
}
,
"-F"
:
{
"#desc"
:
"pass --no-reuse-object to git-pack-objects"
}
,
"-n"
:
{
"#desc"
:
"do not run git-update-server-info"
}
,
"-q|--quiet"
:
{
"#desc"
:
"be quiet"
}
,
"-l|--local"
:
{
"#desc"
:
"pass --local to git-pack-objects"
}
,
"-b|--write-bitmap-index"
:
{
"#desc"
:
"pass --local to git-pack-objects"
}
,
"-i|--delta-islands"
:
{
"#desc"
:
"pass --delta-islands to git-pack-objects"
}
,
"--unpack-unreachable"
:
{
"#desc"
:
"pass --delta-islands to git-pack-objects"
}
,
"-k|--keep-unreachable"
:
{
"#desc"
:
"pass --delta-islands to git-pack-objects"
}
,
"--window"
:
{
"#desc"
:
"size of the window used for delta compression"
}
,
"--window-memory"
:
{
"#desc"
:
"size of the window used for delta compression"
}
,
"--depth"
:
{
"#desc"
:
"limits the maximum delta depth"
}
,
"--threads"
:
{
"#desc"
:
"limits the maximum number of threads"
}
,
"--max-pack-size"
:
{
"#desc"
:
"limits the maximum number of threads"
}
,
"--pack-kept-objects"
:
{
"#desc"
:
"repack objects in packs marked with .keep"
}
,
"--keep-pack"
:
{
"#desc"
:
"do not repack this pack"
}
,
"#desc"
:
"Pack unpacked objects in a repository"
}
,
"replace"
:
{
"-l|--list"
:
{
"#desc"
:
"list replace refs"
}
,
"-d|--delete"
:
{
"#desc"
:
"delete replace refs"
}
,
"-e|--edit"
:
{
"#desc"
:
"edit existing object"
}
,
"-g|--graft"
:
{
"#desc"
:
"change a commit's parents"
}
,
"--convert-graft-file"
:
{
"#desc"
:
"convert existing graft file"
}
,
"-f|--force"
:
{
"#desc"
:
"replace the ref if it exists"
}
,
"--raw"
:
{
"#desc"
:
"do not pretty-print contents for --edit"
}
,
"--format"
:
{
"#desc"
:
"use this format"
}
,
"#desc"
:
"Create, list, delete refs to replace objects"
}
,
"annotate"
:
{
"--incremental"
:
{
"#desc"
:
"Show blame entries as we find them, incrementally"
}
,
"-b"
:
{
"#desc"
:
"Show blank SHA-1 for boundary commits "
}
,
"--root"
:
{
"#desc"
:
"Do not treat root commits as boundaries "
}
,
"--show-stats"
:
{
"#desc"
:
"Show work cost statistics"
}
,
"--progress"
:
{
"#desc"
:
"Force progress reporting"
}
,
"--score-debug"
:
{
"#desc"
:
"Show output score for blame entries"
}
,
"-f|--show-name"
:
{
"#desc"
:
"Show original filename "
}
,
"-n|--show-number"
:
{
"#desc"
:
"Show original linenumber "
}
,
"-p|--porcelain"
:
{
"#desc"
:
"Show in a format designed for machine consumption"
}
,
"--line-porcelain"
:
{
"#desc"
:
"Show porcelain format with per-line commit information"
}
,
"-c"
:
{
"#desc"
:
"Use the same output mode as git-annotate "
}
,
"-t"
:
{
"#desc"
:
"Show raw timestamp "
}
,
"-l"
:
{
"#desc"
:
"Show long commit SHA1 "
}
,
"-s"
:
{
"#desc"
:
"Suppress author name and timestamp "
}
,
"-e|--show-email"
:
{
"#desc"
:
"Show author email instead of name "
}
,
"-w"
:
{
"#desc"
:
"Ignore whitespace differences"
}
,
"--ignore-rev"
:
{
"#desc"
:
"en blaming"
}
,
"--ignore-revs-file"
:
{
"#desc"
:
"en blaming"
}
,
"--color-lines"
:
{
"#desc"
:
"color redundant metadata from previous line differently"
}
,
"--color-by-age"
:
{
"#desc"
:
"color lines by age"
}
,
"--minimal"
:
{
"#desc"
:
"Spend extra cycles to find better match"
}
,
"-S"
:
{
"#desc"
:
"stead of calling git-rev-list"
}
,
"--contents"
:
{
"#desc"
:
"contents as the final image"
}
,
"-C["
:
{
"#desc"
:
"Find line copies within and across files"
}
,
"-M["
:
{
"#desc"
:
"Find line movements within and across files"
}
,
"-L"
:
{
"#desc"
:
"Process only line range n,m, counting from 1"
}
,
"--abbrev[=gits"
:
{
"#desc"
:
"SHA-1s"
}
,
"#desc"
:
"Annotate file lines with commit information"
}
,
"blame"
:
{
"--incremental"
:
{
"#desc"
:
"Show blame entries as we find them, incrementally"
}
,
"-b"
:
{
"#desc"
:
"Show blank SHA-1 for boundary commits "
}
,
"--root"
:
{
"#desc"
:
"Do not treat root commits as boundaries "
}
,
"--show-stats"
:
{
"#desc"
:
"Show work cost statistics"
}
,
"--progress"
:
{
"#desc"
:
"Force progress reporting"
}
,
"--score-debug"
:
{
"#desc"
:
"Show output score for blame entries"
}
,
"-f|--show-name"
:
{
"#desc"
:
"Show original filename "
}
,
"-n|--show-number"
:
{
"#desc"
:
"Show original linenumber "
}
,
"-p|--porcelain"
:
{
"#desc"
:
"Show in a format designed for machine consumption"
}
,
"--line-porcelain"
:
{
"#desc"
:
"Show porcelain format with per-line commit information"
}
,
"-c"
:
{
"#desc"
:
"Use the same output mode as git-annotate "
}
,
"-t"
:
{
"#desc"
:
"Show raw timestamp "
}
,
"-l"
:
{
"#desc"
:
"Show long commit SHA1 "
}
,
"-s"
:
{
"#desc"
:
"Suppress author name and timestamp "
}
,
"-e|--show-email"
:
{
"#desc"
:
"Show author email instead of name "
}
,
"-w"
:
{
"#desc"
:
"Ignore whitespace differences"
}
,
"--ignore-rev"
:
{
"#desc"
:
"en blaming"
}
,
"--ignore-revs-file"
:
{
"#desc"
:
"en blaming"
}
,
"--color-lines"
:
{
"#desc"
:
"color redundant metadata from previous line differently"
}
,
"--color-by-age"
:
{
"#desc"
:
"color lines by age"
}
,
"--minimal"
:
{
"#desc"
:
"Spend extra cycles to find better match"
}
,
"-S"
:
{
"#desc"
:
"stead of calling git-rev-list"
}
,
"--contents"
:
{
"#desc"
:
"contents as the final image"
}
,
"-C["
:
{
"#desc"
:
"Find line copies within and across files"
}
,
"-M["
:
{
"#desc"
:
"Find line movements within and across files"
}
,
"-L"
:
{
"#desc"
:
"Process only line range n,m, counting from 1"
}
,
"--abbrev[=gits"
:
{
"#desc"
:
"SHA-1s"
}
,
"#desc"
:
"Show what revision and author last modified each line of a file"
}
,
"count-objects"
:
{
"-v|--verbose"
:
{
"#desc"
:
"be verbose"
}
,
"-H|--human-readable"
:
{
"#desc"
:
"print sizes in human readable format"
}
,
"#desc"
:
"Count unpacked number of objects and their disk consumption"
}
,
"difftool"
:
{
"-g|--gui"
:
{
"#desc"
:
"use `diff.guitool` instead of `diff.tool`"
}
,
"-d|--dir-diff"
:
{
"#desc"
:
"perform a full-directory diff"
}
,
"-y|--no-prompt"
:
{
"#desc"
:
"do not prompt before launching a diff tool"
}
,
"--symlinks"
:
{
"#desc"
:
"use symlinks in dir-diff mode"
}
,
"-t|--tool"
:
{
"#desc"
:
"use the specified diff tool"
}
,
"--tool-help"
:
{
"#desc"
:
"print a list of diff tools that may be used with `--tool`"
}
,
"--trust-exit-code"
:
{
"#desc"
:
"make 'git-difftool' exit when an invoked diff tool returns a non - zero exit code"
}
,
"-x|--extcmd"
:
{
"#desc"
:
"make 'git-difftool' exit when an invoked diff tool returns a non - zero exit code"
}
,
"--no-index"
:
{
"#desc"
:
"passed to `diff`"
}
,
"#desc"
:
"Show changes using common diff tools"
}
,
"fsck"
:
{
"-v|--verbose"
:
{
"#desc"
:
"be verbose"
}
,
"--unreachable"
:
{
"#desc"
:
"show unreachable objects"
}
,
"--dangling"
:
{
"#desc"
:
"show dangling objects"
}
,
"--tags"
:
{
"#desc"
:
"report tags"
}
,
"--root"
:
{
"#desc"
:
"report root nodes"
}
,
"--cache"
:
{
"#desc"
:
"make index objects head nodes"
}
,
"--reflogs"
:
{
"#desc"
:
"make reflogs head nodes "
}
,
"--full"
:
{
"#desc"
:
"also consider packs and alternate objects"
}
,
"--connectivity-only"
:
{
"#desc"
:
"check only connectivity"
}
,
"--strict"
:
{
"#desc"
:
"enable more strict checking"
}
,
"--lost-found"
:
{
"#desc"
:
"write dangling objects in .git/lost-found"
}
,
"--progress"
:
{
"#desc"
:
"show progress"
}
,
"--name-objects"
:
{
"#desc"
:
"show verbose names for reachable objects"
}
,
"#desc"
:
"Verifies the connectivity and validity of the objects in the database"
}
,
"gitweb"
:
{
"#desc"
:
"Git web interface "
}
,
"help"
:
{
"-a|--all"
:
{
"#desc"
:
"print all available commands"
}
,
"-g|--guides"
:
{
"#desc"
:
"print list of useful guides"
}
,
"-c|--config"
:
{
"#desc"
:
"print all configuration variable names"
}
,
"-m|--man"
:
{
"#desc"
:
"show man page"
}
,
"-w|--web"
:
{
"#desc"
:
"show manual in web browser"
}
,
"-i|--info"
:
{
"#desc"
:
"show info page"
}
,
"-v|--verbose"
:
{
"#desc"
:
"print command description"
}
,
"#desc"
:
"Display help information about Git"
}
,
"instaweb"
:
{
"-l|--local"
:
{
"#desc"
:
"only bind on 127.0.0.1"
}
,
"-p|--port"
:
{
"#desc"
:
"the port to bind to"
}
,
"-d|--httpd"
:
{
"#desc"
:
"the command to launch"
}
,
"-b|--browser"
:
{
"#desc"
:
"the browser to launch"
}
,
"-m|--module-path"
:
{
"#desc"
:
"the browser to launch"
}
,
"--stop"
:
{
"#desc"
:
"stop the web server"
}
,
"--start"
:
{
"#desc"
:
"start the web server"
}
,
"--restart"
:
{
"#desc"
:
"restart the web server"
}
,
"#desc"
:
"Instantly browse your working repository in gitweb"
}
,
"merge-tree"
:
{
"#desc"
:
"Show three-way merge without touching index"
}
,
"rerere"
:
{
"--rerere-autoupdate"
:
{
"#desc"
:
"register clean resolutions in index"
}
,
"#desc"
:
"Reuse recorded resolution of conflicted merges"
}
,
"show-branch"
:
{
"-a|--all"
:
{
"#desc"
:
"show remote-tracking and local branches"
}
,
"-r|--remotes"
:
{
"#desc"
:
"show remote-tracking branches"
}
,
"--color[="
:
{
"#desc"
:
"color '*!+-' corresponding to the branch"
}
,
"--more[=re"
:
{
"#desc"
:
"commits after the common ancestor"
}
,
"--list"
:
{
"#desc"
:
"synonym to more=-1"
}
,
"--no-name"
:
{
"#desc"
:
"suppress naming strings"
}
,
"--current"
:
{
"#desc"
:
"include the current branch"
}
,
"--sha1-name"
:
{
"#desc"
:
"name commits with their object names"
}
,
"--merge-base"
:
{
"#desc"
:
"show possible merge bases"
}
,
"--independent"
:
{
"#desc"
:
"show refs unreachable from any other ref"
}
,
"--topo-order"
:
{
"#desc"
:
"show commits in topological order"
}
,
"--topics"
:
{
"#desc"
:
"show only commits not on the first branch"
}
,
"--sparse"
:
{
"#desc"
:
"show merges reachable from only one tip"
}
,
"--date-order"
:
{
"#desc"
:
"topologically sort, maintaining date order where possible"
}
,
"-g|--reflog"
:
{
"#desc"
:
"topologically sort, maintaining date order where possible"
}
,
"#desc"
:
"Show branches and their commits"
}
,
"verify-commit"
:
{
"-v|--verbose"
:
{
"#desc"
:
"print commit contents"
}
,
"--raw"
:
{
"#desc"
:
"print raw gpg status output"
}
,
"#desc"
:
"Check the GPG signature of commits"
}
,
"verify-tag"
:
{
"-v|--verbose"
:
{
"#desc"
:
"print tag contents"
}
,
"--raw"
:
{
"#desc"
:
"print raw gpg status output"
}
,
"--format"
:
{
"#desc"
:
"format to use for the output"
}
,
"#desc"
:
"Check the GPG signature of tags"
}
,
"whatchanged"
:
{
"-q|--quiet"
:
{
"#desc"
:
"suppress diff output"
}
,
"--source"
:
{
"#desc"
:
"show source"
}
,
"--use-mailmap"
:
{
"#desc"
:
"Use mail map file"
}
,
"--decorate-refs"
:
{
"#desc"
:
"Use mail map file"
}
,
"--decorate-refs-exclude"
:
{
"#desc"
:
"Use mail map file"
}
,
"--decorate"
:
{
"#desc"
:
"decorate options"
}
,
"-L"
:
{
"#desc"
:
"Process line range n,m in file, counting from 1"
}
,
"#desc"
:
"Show logs with difference each commit introduces"
}
,
"cvsexportcommit"
:
{
"#desc"
:
"Export a single commit to a CVS checkout"
}
,
"cvsimport"
:
{
"#desc"
:
"Salvage your data out of another SCM people love to hate"
}
,
"cvsserver"
:
{
"#desc"
:
"A CVS server emulator for Git"
}
,
"imap-send"
:
{
"-v|--verbose"
:
{
"#desc"
:
"be more verbose"
}
,
"-q|--quiet"
:
{
"#desc"
:
"be more quiet"
}
,
"--curl"
:
{
"#desc"
:
"IMAP server"
}
,
"#desc"
:
"Send a collection of patches from stdin to an IMAP folder"
}
,
"p4"
:
{
"#desc"
:
"Import from and submit to Perforce repositories"
}
,
"quiltimport"
:
{
"-n|--dry-run"
:
{
"#desc"
:
"dry run"
}
,
"--author"
:
{
"#desc"
:
"author name and email address for patches without any"
}
,
"--patches"
:
{
"#desc"
:
"path to the quilt patches"
}
,
"--series"
:
{
"#desc"
:
"path to the quilt series file"
}
,
"--keep-non-patch"
:
{
"#desc"
:
"Pass -b to git mailinfo"
}
,
"#desc"
:
"Applies a quilt patchset onto the current branch"
}
,
"request-pull"
:
{
"-p"
:
{
"#desc"
:
"show patch text as well"
}
,
"#desc"
:
"Generates a summary of pending changes"
}
,
"send-email"
:
{
"#desc"
:
"Send a collection of patches as emails"
}
,
"svn"
:
{
"#desc"
:
"Bidirectional operation between a Subversion repository and Git"
}
,
"apply"
:
{
"--exclude"
:
{
"#desc"
:
"don't apply changes matching the given path"
}
,
"--include"
:
{
"#desc"
:
"apply changes matching the given path"
}
,
"-p"
:
{
"#desc"
:
"ading slashes from traditional diff paths"
}
,
"--no-add"
:
{
"#desc"
:
"ignore additions made by the patch"
}
,
"--stat"
:
{
"#desc"
:
"instead of applying the patch, output diffstat for the input"
}
,
"--numstat"
:
{
"#desc"
:
"show number of added and deleted lines in decimal notation"
}
,
"--summary"
:
{
"#desc"
:
"instead of applying the patch, output a summary for the input"
}
,
"--check"
:
{
"#desc"
:
"instead of applying the patch, see if the patch is applicable"
}
,
"--index"
:
{
"#desc"
:
"make sure the patch is applicable to the current index"
}
,
"-N|--intent-to-add"
:
{
"#desc"
:
"mark new files with `git add --intent-to-add`"
}
,
"--cached"
:
{
"#desc"
:
"apply a patch without touching the working tree"
}
,
"--unsafe-paths"
:
{
"#desc"
:
"accept a patch that touches outside the working area"
}
,
"--apply"
:
{
"#desc"
:
"also apply the patch "
}
,
"-3|--3way"
:
{
"#desc"
:
"attempt three-way merge if a patch does not apply"
}
,
"--build-fake-ancestor"
:
{
"#desc"
:
"attempt three-way merge if a patch does not apply"
}
,
"-z"
:
{
"#desc"
:
"NUL character"
}
,
"-C"
:
{
"#desc"
:
"nes of context match"
}
,
"--whitespace"
:
{
"#desc"
:
"nes of context match"
}
,
"--ignore-space-change"
:
{
"#desc"
:
"nes of context match"
}
,
"--ignore-whitespace"
:
{
"#desc"
:
"ignore changes in whitespace when finding context"
}
,
"-R|--reverse"
:
{
"#desc"
:
"apply the patch in reverse"
}
,
"--unidiff-zero"
:
{
"#desc"
:
"don't expect at least one line of context"
}
,
"--reject"
:
{
"#desc"
:
"leave the rejected hunks in corresponding *.rej files"
}
,
"--allow-overlap"
:
{
"#desc"
:
"allow overlapping hunks"
}
,
"-v|--verbose"
:
{
"#desc"
:
"be verbose"
}
,
"--inaccurate-eof"
:
{
"#desc"
:
"tolerate incorrectly detected missing new-line at the end of file"
}
,
"--recount"
:
{
"#desc"
:
"do not trust the line counts in the hunk headers"
}
,
"--directory"
:
{
"#desc"
:
"all filenames"
}
,
"#desc"
:
"Apply a patch to files and/or to the index"
}
,
"checkout-index"
:
{
"#desc"
:
"Copy files from the index to the working tree"
}
,
"commit-graph"
:
{
"#desc"
:
"Write and verify Git commit-graph files"
}
,
"commit-tree"
:
{
"#desc"
:
"Create a new commit object"
}
,
"hash-object"
:
{
"-t"
:
{
"#desc"
:
"object type"
}
,
"-w"
:
{
"#desc"
:
"write the object into the object database"
}
,
"--stdin"
:
{
"#desc"
:
"read the object from stdin"
}
,
"--stdin-paths"
:
{
"#desc"
:
"read file names from stdin"
}
,
"--no-filters"
:
{
"#desc"
:
"store file as is without filters"
}
,
"--literally"
:
{
"#desc"
:
"Git"
}
,
"--path"
:
{
"#desc"
:
"process file as it were from this path"
}
,
"#desc"
:
"Compute object ID and optionally creates a blob from a file"
}
,
"index-pack"
:
{
"#desc"
:
"Build pack index file for an existing packed archive"
}
,
"merge-file"
:
{
"-p|--stdout"
:
{
"#desc"
:
"send results to standard output"
}
,
"--diff3"
:
{
"#desc"
:
"use a diff3 based merge"
}
,
"--ours"
:
{
"#desc"
:
"for conflicts, use our version"
}
,
"--theirs"
:
{
"#desc"
:
"for conflicts, use their version"
}
,
"--union"
:
{
"#desc"
:
"for conflicts, use a union version"
}
,
"--marker-size"
:
{
"#desc"
:
"for conflicts, use this marker size"
}
,
"-q|--quiet"
:
{
"#desc"
:
"do not warn about conflicts"
}
,
"-L"
:
{
"#desc"
:
"set labels for file1/orig-file/file2"
}
,
"#desc"
:
"Run a three-way file merge"
}
,
"merge-index"
:
{
"#desc"
:
"Run a merge for files needing merging"
}
,
"mktag"
:
{
"#desc"
:
"Creates a tag object"
}
,
"mktree"
:
{
"-z"
:
{
"#desc"
:
"NUL terminated"
}
,
"--missing"
:
{
"#desc"
:
"allow missing objects"
}
,
"--batch"
:
{
"#desc"
:
"allow creation of more than one tree"
}
,
"#desc"
:
"Build a tree-object from ls-tree formatted text"
}
,
"multi-pack-index"
:
{
"--object-dir"
:
{
"#desc"
:
"object directory containing set of packfile and pack-index pairs"
}
,
"--progress"
:
{
"#desc"
:
"force progress reporting"
}
,
"--batch-size"
:
{
"#desc"
:
"during repack, collect pack-files of smaller size into a batch that is larger than this size"
}
,
"#desc"
:
"Write and verify multi-pack-indexes"
}
,
"pack-objects"
:
{
"-q|--quiet"
:
{
"#desc"
:
"do not show progress meter"
}
,
"--progress"
:
{
"#desc"
:
"show progress meter"
}
,
"--all-progress"
:
{
"#desc"
:
"show progress meter during object writing phase"
}
,
"--all-progress-implied"
:
{
"#desc"
:
"show progress meter during object writing phase"
}
,
"--index-version"
:
{
"#desc"
:
"offset>]"
}
,
"--max-pack-size"
:
{
"#desc"
:
"maximum size of each output pack file"
}
,
"--local"
:
{
"#desc"
:
"ignore borrowed objects from alternate object store"
}
,
"--incremental"
:
{
"#desc"
:
"ignore packed objects"
}
,
"--window"
:
{
"#desc"
:
"limit pack window by objects"
}
,
"--window-memory"
:
{
"#desc"
:
"limit pack window by memory in addition to object limit"
}
,
"--depth"
:
{
"#desc"
:
"maximum length of delta chain allowed in the resulting pack"
}
,
"--reuse-delta"
:
{
"#desc"
:
"reuse existing deltas"
}
,
"--reuse-object"
:
{
"#desc"
:
"reuse existing objects"
}
,
"--delta-base-offset"
:
{
"#desc"
:
"OFS_DELTA objects"
}
,
"--threads"
:
{
"#desc"
:
"use threads when searching for best delta matches"
}
,
"--non-empty"
:
{
"#desc"
:
"do not create an empty pack output"
}
,
"--revs"
:
{
"#desc"
:
"read revision arguments from standard input"
}
,
"--unpacked"
:
{
"#desc"
:
"limit the objects to those that are not yet packed"
}
,
"--all"
:
{
"#desc"
:
"include objects reachable from any reference"
}
,
"--reflog"
:
{
"#desc"
:
"include objects referred by reflog entries"
}
,
"--indexed-objects"
:
{
"#desc"
:
"include objects referred to by the index"
}
,
"--stdout"
:
{
"#desc"
:
"output pack to stdout"
}
,
"--include-tag"
:
{
"#desc"
:
"include tag objects that refer to objects to be packed"
}
,
"--keep-unreachable"
:
{
"#desc"
:
"keep unreachable objects"
}
,
"--pack-loose-unreachable"
:
{
"#desc"
:
"keep unreachable objects"
}
,
"--unpack-unreachable"
:
{
"#desc"
:
"keep unreachable objects"
}
,
"--sparse"
:
{
"#desc"
:
"use the sparse reachability algorithm"
}
,
"--thin"
:
{
"#desc"
:
"create thin packs"
}
,
"--shallow"
:
{
"#desc"
:
"create packs suitable for shallow fetches"
}
,
"--honor-pack-keep"
:
{
"#desc"
:
"ignore packs that have companion .keep file"
}
,
"--keep-pack"
:
{
"#desc"
:
"ignore this pack"
}
,
"--compression"
:
{
"#desc"
:
"pack compression level"
}
,
"--keep-true-parents"
:
{
"#desc"
:
"do not hide commits by grafts"
}
,
"--use-bitmap-index"
:
{
"#desc"
:
"use a bitmap index if available to speed up counting objects"
}
,
"--write-bitmap-index"
:
{
"#desc"
:
"write a bitmap index together with the pack index"
}
,
"--filter"
:
{
"#desc"
:
"object filtering"
}
,
"--missing"
:
{
"#desc"
:
"handling for missing objects"
}
,
"--exclude-promisor-objects"
:
{
"#desc"
:
"handling for missing objects"
}
,
"--delta-islands"
:
{
"#desc"
:
"respect islands during delta compression"
}
,
"#desc"
:
"Create a packed archive of objects"
}
,
"prune-packed"
:
{
"-n|--dry-run"
:
{
"#desc"
:
"dry run"
}
,
"-q|--quiet"
:
{
"#desc"
:
"be quiet"
}
,
"#desc"
:
"Remove extra objects that are already in pack files"
}
,
"read-tree"
:
{
"--index-output"
:
""
,
"--empty"
:
{
"#desc"
:
"only empty the index"
}
,
"-v|--verbose"
:
{
"#desc"
:
"be verbose"
}
,
"-m"
:
{
"#desc"
:
"perform a merge in addition to a read"
}
,
"--trivial"
:
{
"#desc"
:
"merge if no file level merging required"
}
,
"--aggressive"
:
{
"#desc"
:
"merge in presence of adds and removes"
}
,
"--reset"
:
{
"#desc"
:
"same as -m, but discard unmerged entries"
}
,
"--prefix"
:
{
"#desc"
:
"same as -m, but discard unmerged entries"
}
,
"-u"
:
{
"#desc"
:
"update working tree with merge result"
}
,
"--exclude-per-directory"
:
{
"#desc"
:
"update working tree with merge result"
}
,
"-i"
:
{
"#desc"
:
"don't check the working tree after merging"
}
,
"-n|--dry-run"
:
{
"#desc"
:
"don't update the index or the work tree"
}
,
"--no-sparse-checkout"
:
{
"#desc"
:
"skip applying sparse checkout filter"
}
,
"--debug-unpack"
:
{
"#desc"
:
"debug unpack-trees"
}
,
"--recurse-submodules"
:
{
"#desc"
:
"debug unpack-trees"
}
,
"-q|--quiet"
:
{
"#desc"
:
"suppress feedback messages"
}
,
"#desc"
:
"Reads tree information into the index"
}
,
"symbolic-ref"
:
{
"-q|--quiet"
:
{
"#desc"
:
"suppress error message for non-symbolic  refs"
}
,
"-d|--delete"
:
{
"#desc"
:
"delete symbolic ref"
}
,
"--short"
:
{
"#desc"
:
"shorten ref output"
}
,
"-m"
:
{
"#desc"
:
"reason of the update"
}
,
"#desc"
:
"Read, modify and delete symbolic refs"
}
,
"unpack-objects"
:
{
"#desc"
:
"Unpack objects from a packed archive"
}
,
"update-index"
:
{
"#desc"
:
"Register file contents in the working tree to the index"
}
,
"update-ref"
:
{
"-m"
:
{
"#desc"
:
"reason of the update"
}
,
"-d"
:
{
"#desc"
:
"delete the reference"
}
,
"--no-deref"
:
{
"#desc"
:
"update t the one it points to"
}
,
"-z"
:
{
"#desc"
:
"NUL-terminated arguments"
}
,
"--stdin"
:
{
"#desc"
:
"read updates from stdin"
}
,
"--create-reflog"
:
{
"#desc"
:
"create a reflog"
}
,
"#desc"
:
"Update the object name stored in a ref safely"
}
,
"write-tree"
:
{
"--missing-ok"
:
{
"#desc"
:
"allow missing objects"
}
,
"--prefix"
:
{
"#desc"
:
"write tree object for a subdirectory "
}
,
"#desc"
:
"Create a tree object from the current index"
}
,
"cat-file"
:
{
"-t"
:
{
"#desc"
:
"show object type"
}
,
"-s"
:
{
"#desc"
:
"show object size"
}
,
"-e"
:
{
"#desc"
:
"exit with zero when there's no error"
}
,
"-p"
:
{
"#desc"
:
"pretty-print object's content"
}
,
"--textconv"
:
{
"#desc"
:
"for blob objects, run textconv on object's content"
}
,
"--filters"
:
{
"#desc"
:
"for blob objects, run filters on object's content"
}
,
"--path"
:
{
"#desc"
:
"use a specific path for --textconv/--filters"
}
,
"--allow-unknown-type"
:
{
"#desc"
:
"allow -s and -t to work with broken/corrupt objects"
}
,
"--buffer"
:
{
"#desc"
:
"buffer --batch output"
}
,
"--batch[="
:
{
"#desc"
:
"show info and content of objects fed from the standard input"
}
,
"--batch-check"
:
{
"#desc"
:
"show info and content of objects fed from the standard input"
}
,
"--follow-symlinks"
:
{
"#desc"
:
"follow in-tree symlinks "
}
,
"--batch-all-objects"
:
{
"#desc"
:
"show all objects with --batch or --batch-check"
}
,
"--unordered"
:
{
"#desc"
:
"do not order --batch-all-objects output"
}
,
"#desc"
:
"Provide content or type and size information for repository objects"
}
,
"cherry"
:
{
"--abbrev[=gits"
:
{
"#desc"
:
"SHA-1s"
}
,
"-v|--verbose"
:
{
"#desc"
:
"be verbose"
}
,
"#desc"
:
"Find commits yet to be applied to upstream"
}
,
"diff-files"
:
{
"#desc"
:
"Compares files in the working tree and the index"
}
,
"diff-index"
:
{
"#desc"
:
"Compare a tree to the working tree or index"
}
,
"diff-tree"
:
{
"#desc"
:
"Compares the content and mode of blobs found via two tree objects"
}
,
"for-each-ref"
:
{
"-s|--shell"
:
{
"#desc"
:
"quote placeholders suitably for shells"
}
,
"-p|--perl"
:
{
"#desc"
:
"quote placeholders suitably for perl"
}
,
"--python"
:
{
"#desc"
:
"quote placeholders suitably for python"
}
,
"--tcl"
:
{
"#desc"
:
"Tcl"
}
,
"--count"
:
{
"#desc"
:
"tched refs"
}
,
"--format"
:
{
"#desc"
:
"format to use for the output"
}
,
"--color[="
:
{
"#desc"
:
"respect format colors"
}
,
"--sort"
:
{
"#desc"
:
"field name to sort on"
}
,
"--points-at"
:
{
"#desc"
:
"rint only refs which points at the given object"
}
,
"--merged"
:
{
"#desc"
:
"print only refs that are merged"
}
,
"--no-merged"
:
{
"#desc"
:
"rint only refs that are not merged"
}
,
"--contains"
:
{
"#desc"
:
"print only refs which contain the commit"
}
,
"--no-contains"
:
{
"#desc"
:
"print only refs which contain the commit"
}
,
"--ignore-case"
:
{
"#desc"
:
"sorting and filtering are case insensitive"
}
,
"#desc"
:
"Output information on each ref"
}
,
"get-tar-commit-id"
:
{
"#desc"
:
"Extract commit ID from an archive created using git-archive"
}
,
"ls-files"
:
{
"#desc"
:
"Show information about files in the index and the working tree"
}
,
"ls-remote"
:
{
"-q|--quiet"
:
{
"#desc"
:
"URL"
}
,
"--upload-pack"
:
{
"#desc"
:
"ath of git-upload-pack on the remote host"
}
,
"-t|--tags"
:
{
"#desc"
:
"limit to tags"
}
,
"-h|--heads"
:
{
"#desc"
:
"limit to heads"
}
,
"--refs"
:
{
"#desc"
:
"do not show peeled tags"
}
,
"--get-url"
:
{
"#desc"
:
"take url.steadOf into account"
}
,
"--sort"
:
{
"#desc"
:
"field name to sort on"
}
,
"--exit-code"
:
{
"#desc"
:
"exit with exit code 2 if no matching refs are found"
}
,
"--symref"
:
{
"#desc"
:
"show underlying ref in addition to the object pointed by it"
}
,
"-o|--server-option"
:
{
"#desc"
:
"show underlying ref in addition to the object pointed by it"
}
,
"#desc"
:
"List references in a remote repository"
}
,
"ls-tree"
:
{
"-d"
:
{
"#desc"
:
"only show trees"
}
,
"-r"
:
{
"#desc"
:
"recurse into subtrees"
}
,
"-t"
:
{
"#desc"
:
"show trees when recursing"
}
,
"-z"
:
{
"#desc"
:
"NUL byte"
}
,
"-l|--long"
:
{
"#desc"
:
"include object size"
}
,
"--name-only"
:
{
"#desc"
:
"list only filenames"
}
,
"--name-status"
:
{
"#desc"
:
"list only filenames"
}
,
"--full-name"
:
{
"#desc"
:
"use full path names"
}
,
"--full-tree"
:
{
"#desc"
:
"list entire tree; not just current directory "
}
,
"--abbrev[=gits"
:
{
"#desc"
:
"SHA-1s"
}
,
"#desc"
:
"List the contents of a tree object"
}
,
"merge-base"
:
{
"-a|--all"
:
{
"#desc"
:
"output all common ancestors"
}
,
"--octopus"
:
{
"#desc"
:
"find ancestors for a single n-way merge"
}
,
"--independent"
:
{
"#desc"
:
"list revs not reachable from others"
}
,
"--is-ancestor"
:
{
"#desc"
:
"is the first one ancestor of the other?"
}
,
"--fork-point"
:
{
"#desc"
:
"find where rked from reflog of "
}
,
"#desc"
:
"Find as good common ancestors as possible for a merge"
}
,
"name-rev"
:
{
"--name-only"
:
{
"#desc"
:
"print only names "
}
,
"--tags"
:
{
"#desc"
:
"only use tags to name the commits"
}
,
"--refs"
:
{
"#desc"
:
"only use refs matching "
}
,
"--exclude"
:
{
"#desc"
:
"ignore refs matching "
}
,
"--all"
:
{
"#desc"
:
"list all commits reachable from all refs"
}
,
"--stdin"
:
{
"#desc"
:
"read from stdin"
}
,
"--undefined"
:
{
"#desc"
:
"allow to print `undefined` names "
}
,
"--always"
:
{
"#desc"
:
"show abbreviated commit object as fallback"
}
,
"#desc"
:
"Find symbolic names for given revs"
}
,
"pack-redundant"
:
{
"#desc"
:
"Find redundant pack files"
}
,
"rev-list"
:
{
"#desc"
:
"Lists commit objects in reverse chronological order"
}
,
"rev-parse"
:
{
"#desc"
:
"Pick out and massage parameters"
}
,
"show-index"
:
{
"#desc"
:
"Show packed archive index"
}
,
"show-ref"
:
{
"--tags"
:
{
"#desc"
:
"only show tags "
}
,
"--heads"
:
{
"#desc"
:
"only show heads "
}
,
"--verify"
:
{
"#desc"
:
"stricter reference checking, requires exact ref path"
}
,
"--head"
:
{
"#desc"
:
"HEAD reference, even if it would be filtered out"
}
,
"-d|--dereference"
:
{
"#desc"
:
"IDs"
}
,
"-s|--hash[=gits"
:
{
"#desc"
:
"IDs"
}
,
"--abbrev[=gits"
:
{
"#desc"
:
"SHA-1s"
}
,
"-q|--quiet"
:
{
"#desc"
:
"do not print results to stdout "
}
,
"--exclude-existing"
:
{
"#desc"
:
"do not print results to stdout "
}
,
"#desc"
:
"List references in a local repository"
}
,
"unpack-file"
:
{
"#desc"
:
"Creates a temporary file with a blob's contents"
}
,
"var"
:
{
"#desc"
:
"Show a Git logical variable"
}
,
"verify-pack"
:
{
"-v|--verbose"
:
{
"#desc"
:
"verbose"
}
,
"-s|--stat-only"
:
{
"#desc"
:
"show statistics only"
}
,
"#desc"
:
"Validate packed Git archive files"
}
,
"daemon"
:
{
"#desc"
:
"A really simple server for Git repositories"
}
,
"fetch-pack"
:
{
"#desc"
:
"Receive missing objects from another repository"
}
,
"send-pack"
:
{
"--all"
:
{
"#desc"
:
"and explicit ecification are mutually exclusive."
}
,
"-v|--verbose"
:
{
"#desc"
:
"be more verbose"
}
,
"-q|--quiet"
:
{
"#desc"
:
"be more quiet"
}
,
"--receive-pack"
:
{
"#desc"
:
"be more quiet"
}
,
"--exec"
:
{
"#desc"
:
"be more quiet"
}
,
"--remote"
:
{
"#desc"
:
"remote name"
}
,
"-n|--dry-run"
:
{
"#desc"
:
"dry run"
}
,
"--mirror"
:
{
"#desc"
:
"mirror all refs"
}
,
"-f|--force"
:
{
"#desc"
:
"force updates"
}
,
"--signed"
:
{
"#desc"
:
"force updates"
}
,
"--push-option"
:
{
"#desc"
:
"force updates"
}
,
"--progress"
:
{
"#desc"
:
"force progress reporting"
}
,
"--thin"
:
{
"#desc"
:
"use thin pack"
}
,
"--atomic"
:
{
"#desc"
:
"request atomic transaction on remote side"
}
,
"--stateless-rpc"
:
{
"#desc"
:
"RPC protocol"
}
,
"--stdin"
:
{
"#desc"
:
"read refs from stdin"
}
,
"--helper-status"
:
{
"#desc"
:
"print status from remote helper"
}
,
"--force-with-lease"
:
{
"#desc"
:
"print status from remote helper"
}
,
"#desc"
:
"Push objects over Git protocol to another repository"
}
,
"update-server-info"
:
{
"-f|--force"
:
{
"#desc"
:
"update the info files from scratch"
}
,
"#desc"
:
"Update auxiliary info file to help dumb servers"
}
,
"check-attr"
:
{
"-a|--all"
:
{
"#desc"
:
"report all attributes set on file"
}
,
"--cached"
:
{
"#desc"
:
"use .gitattributes only from the index"
}
,
"--stdin"
:
{
"#desc"
:
"read file names from stdin"
}
,
"-z"
:
{
"#desc"
:
"NUL character"
}
,
"#desc"
:
"Display gitattributes information"
}
,
"check-ignore"
:
{
"-q|--quiet"
:
{
"#desc"
:
"suppress progress reporting"
}
,
"-v|--verbose"
:
{
"#desc"
:
"be verbose"
}
,
"--stdin"
:
{
"#desc"
:
"read file names from stdin"
}
,
"-z"
:
{
"#desc"
:
"NUL character"
}
,
"-n|--non-matching"
:
{
"#desc"
:
"show non-matching input paths"
}
,
"--no-index"
:
{
"#desc"
:
"ignore index when checking"
}
,
"#desc"
:
"Debug gitignore / exclude files"
}
,
"check-mailmap"
:
{
"--stdin"
:
{
"#desc"
:
"also read contacts from stdin"
}
,
"#desc"
:
"Show canonical names and email addresses of contacts"
}
,
"check-ref-format"
:
{
"#desc"
:
"Ensures that a reference name is well formed"
}
,
"column"
:
{
"--command"
:
{
"#desc"
:
"lookup config vars"
}
,
"--mode[="
:
{
"#desc"
:
"layout to use"
}
,
"--raw-mode"
:
{
"#desc"
:
"layout to use"
}
,
"--width"
:
{
"#desc"
:
"Maximum width"
}
,
"--indent"
:
{
"#desc"
:
"Padding space on left border"
}
,
"--nl"
:
{
"#desc"
:
"Padding space on right border"
}
,
"--padding"
:
{
"#desc"
:
"Padding space between columns"
}
,
"#desc"
:
"Display data in columns"
}
,
"credential"
:
{
"#desc"
:
"Retrieve and store user credentials"
}
,
"credential-cache"
:
{
"--timeout"
:
{
"#desc"
:
"number of seconds to cache credentials"
}
,
"--socket"
:
{
"#desc"
:
"path of cache-daemon socket"
}
,
"#desc"
:
"Helper to temporarily store passwords in memory"
}
,
"credential-store"
:
{
"--file"
:
{
"#desc"
:
"fetch and store credentials in "
}
,
"#desc"
:
"Helper to store credentials on disk"
}
,
"fmt-merge-msg"
:
{
"--log[=tries"
:
{
"#desc"
:
"from shortlog"
}
,
"-m|--message"
:
{
"#desc"
:
"start of message"
}
,
"-F|--file"
:
{
"#desc"
:
"file to read from"
}
,
"#desc"
:
"Produce a merge commit message"
}
,
"interpret-trailers"
:
{
"--in-place"
:
{
"#desc"
:
"edit files in place"
}
,
"--trim-empty"
:
{
"#desc"
:
"trim empty trailers"
}
,
"--where"
:
{
"#desc"
:
"where to place the new trailer"
}
,
"--if-exists"
:
{
"#desc"
:
"ction if trailer already exists"
}
,
"--if-missing"
:
{
"#desc"
:
"ction if trailer already exists"
}
,
"--only-trailers"
:
{
"#desc"
:
"output only the trailers"
}
,
"--only-input"
:
{
"#desc"
:
"do not apply config rules"
}
,
"--unfold"
:
{
"#desc"
:
"join whitespace-continued values"
}
,
"--parse"
:
{
"#desc"
:
"set parsing options"
}
,
"--no-divider"
:
{
"#desc"
:
"do not treat --- specially"
}
,
"--trailer"
:
{
"#desc"
:
"trailer to add"
}
,
"#desc"
:
"Add or parse structured information in commit messages"
}
,
"mailinfo"
:
{
"#desc"
:
"Extracts patch and authorship from a single e-mail message"
}
,
"mailsplit"
:
{
"#desc"
:
"Simple UNIX mbox splitter program"
}
,
"merge-one-file"
:
{
"#desc"
:
"The standard helper program to use with git-merge-index"
}
,
"patch-id"
:
{
"#desc"
:
"Compute unique ID for a patch"
}
,
"sh-i18n"
:
{
"#desc"
:
"Git's i18n setup code for shell scripts"
}
,
"sh-setup"
:
{
"#desc"
:
"Common Git shell script setup code"
}
,
"stripspace"
:
{
"-s|--strip-comments"
:
{
"#desc"
:
"skip and remove all lines starting with comment character"
}
,
"-c|--comment-lines"
:
{
"#desc"
:
"prepend comment character and space to each line"
}
,
"#desc"
:
"Remove unnecessary whitespace"
}
}
