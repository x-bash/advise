#! /usr/bin/env bash

# author:       Li Junhao           edwin.jh.lee@gmail.com    edwinjhlee.github.io
# maintainer:   Li Junhao

line.map(){
    local line
    while read -rd $'\n' line; do
        eval "$@"
    done
}

# using regex to filter
line.rmap(){
    local line
    local code="${2: echo \"\$line\"}"
    while read -rd $'\n' line; do
        if echo "$line" | grep "$1"; then
            eval "$code"
        fi
    done
}

# using glob to filter
line.gmap(){
    local line
    local code="${2: echo \"\$line\"}"
    while read -rd $'\n' line; do
        if echo "$line" | grep "$1"; then
            eval "$code"
        fi
    done
}

# using eval to filter
line.fmap(){
    local line
    local code="${2: echo \"\$line\"}"
    while read -rd $'\n' line; do
        if eval "$1"; then
            eval "$code"
        fi
    done
}

# From file.exits_or_append
line.exist_or_append() {
    if [ $# -eq 0 ]; then
        echo "show help" >&2
    elif [ $# -eq 1 ]; then
        local string_to_append="$1"
        tee /dev/stdout /dev/stderr 2>(
            if ! grep -F --quiet "$string_to_append"; then
                echo "$string_to_append"
            fi
        )
    elif [ $# -eq 2 ]; then
        local filename="$1"
        local string_to_append="$2"
        grep -F --quiet "$string_to_append" "$filename" || echo "$string_to_append" >>"$filename"
    fi
}

# Only works for zsh bash
line.to_array(){
    local name=${1:?Array name} line
    shift
    if [ $# -eq 0 ]; then
        while read -r line; do
            eval "$name+=(\"\$line\")"
        done # <<< "$(cat -)"
    else
        while [ $# -gt 0 ]; do
            while read -r line; do
                eval "$name+=(\"\$line\")"
            done <"$1"
            shift
        done
    fi
}

str.trim(){
    local var="$*"
    # remove leading whitespace characters
    var="${var#"${var%%[![:space:]]*}"}"
    # remove trailing whitespace characters
    var="${var%"${var##*[![:space:]]}"}"
    echo -n "$var"
}

line.to_array.trim(){
    # TODO: local IFS
    local name=${1:?Array name}
    local line arr=()
    while read -r line; do
        line="$(str.trim "$line")"
        arr+=("$line")
    done <<< "$(cat -)"
    eval "$name"'=("${arr[@]}")'
}

line.to_array.trim.ignore_empty(){
    # TODO: local IFS
    local name=${1:?Array name}
    local line arr=()
    while read -r line; do
        line="$(str.trim "$line")"
        [ "$line" = "" ] && continue
        arr+=("$line")
    done <<< "$(cat -)"
    eval "$name"'=("${arr[@]}")'
}
