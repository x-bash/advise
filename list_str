# shellcheck shell=sh
# shellcheck disable=SC2039

# author:       Li Junhao           edwin.jh.lee@gmail.com    edwinjhlee.github.io
# maintainer:   Li Junhao

debug_init array

# POC: Pass at all platform
# > sep=$(printf "\001"); t="$(printf "%s\001%s\001%s" "18" "123" "456")"; echo "${t%%$sep*}"
# 18

# f(){ IFS="$(printf "\n")"; echo "|$IFS|"; echo "$*"; s="$*"; echo "${#s}"; }; f 1 2 3 
# s size is 5

# \n Using \001
# 

LIST_SEP="$(printf "\n")"
PARAM_NEWLINE_TR="$(printf "\001")"


# LIST_NEWLINE="$(printf "\n")" # Won't work
LIST_NEWLINE="
"

LIST_NEWLINE_TR="$(printf "\001")"


list_make(){
    local O="${1:?list_name}"
    eval "$O=0"
}

list_free(){
    eval "unset $O"
}

list_size(){
    local O="${O:?list_name}"
    eval printf "%s" "\${$O%%${LIST_NEWLINE}*}"
    # eval printf "%s" "\$$O" | cut -d "$LIST_SEP" -f 1
    # eval "echo ${$O}"
}

# First elem is length
list_get(){
    local O="${O:?list_name}"

    local i=${1:?idx}

    local len
    len="$(list_size)"
    if [ "$i" -ge "$len" ]; then
        return 1
    fi

    # eval printf "%s" "\"\$$O\""

    # eval printf "%s" "\"\$$O\"" | cut -d "$LIST_NEWLINE" -f "$((i+2))" | tr  "$LIST_NEWLINE_TR" "\n"
    eval printf "%s" "\"\$$O\"" | awk -v s=$((i+2)) 'NR==s{ gsub("\001", "\n"); printf("%s", $0); exit 0; }'
}

_list_tr(){
    # $LIST_SEP = "\n"
    printf "%s" "$1" | tr "\n" "$PARAM_NEWLINE_TR"
}

list_push() {
    local O="${O:?list_name}"
    local IFS
    IFS="$(printf "\002")"    # TMP SEP
    local sss
    sss="$(printf "%s" "$*" | tr "\n\002" "\001\n")"

    local len
    len=$(eval printf "%s" "\${$O%%${LIST_NEWLINE}*}")
    len="${len:-0}"

    local t
    if [ "$len" -eq 0 ]; then
        t="$(printf "%s\n%s" "$#" "$sss")"
        eval $O='"$t"'
    else
        local body
        body=$(eval printf "%s" "\${$O#*${LIST_NEWLINE}}")
        t="$(printf "%s\n%s\n%s" "$((len+$#))" "$body" "$sss")"
        eval $O='"$t"'
    fi
}

list_unshift() {
    local O="${O:?list_name}"
    local IFS
    IFS="$(printf "\002")"    # TMP SEP
    local sss
    local i
    for i in "$@"; do
        sss="${sss:+}"
    done
    sss="$(printf "%s" "$*" | tr "\n\002" "\001\n")"

    local len
    
    len="$(eval printf "%s" \"\${$O%%${LIST_NEWLINE}*}\")"
    len="${len:-0}"

    local t
    if [ "$len" -eq 0 ]; then
        t="$(printf "%s\n%s" "$#" "$sss")"
        eval $O='"$t"'
    else
        local body
        body=$(eval printf "%s" "\${$O#*${LIST_NEWLINE}}")
        t="$(printf "%s\n%s\n%s" "$((len+$#))" "$sss" "$body")"
        eval $O='"$t"'
    fi
}

list_head(){
    local len="$(list_size)"
    if [ "$len" -eq 0 ]; then
        return 1
    fi

    list_get 0
}

list_tail(){
    local len="$(list_size)"
    if [ "$len" -eq 0 ]; then
        return 1
    fi

    list_get "$((len-1))"
}

list_top(){ list_tail; }

list_foreach(){
    local O="${O:?list_name}"
    local f="${1:?function name}"
    local line
    local i=0
    while read -r line; do
        [ "$i" -ne 0 ] && eval "$f" "$i" "$(printf "$line" | tr '\001' '
')"
        i=$((i+1))
    done <<A
$(eval printf "%s" "\$$O" | tr "\n$LIST_SEP" '\001\n' )
A
}

list_pop(){
    local O="${O:?list_name}"
    local len
    len=$(eval printf "%s" "\${$O%%${LIST_NEWLINE}*}")
    case "$len" in
    0)  return 1    ;;
    1)  eval printf "%s" "\${$O##*${LIST_NEWLINE}}"
        eval $O=0   ;;
    *)  eval printf "%s" "\${$O##*${LIST_NEWLINE}}"
        eval $O="$(printf "%s${LIST_NEWLINE}%s" "$((len-1))" "$(eval printf "%s" "\${$O%${LIST_NEWLINE}*}")")" ;;
    esac
    return 0
}

list_shift(){
    local O="${O:?list_name}"
    local len
    len=$(eval printf "%s" "\${$O%%${LIST_NEWLINE}*}")
    case "$len" in
    0)  return 1    ;;
    1)  eval printf "%s" "\${$O##*${LIST_NEWLINE}}"
        eval $O=0   ;;
    *)  
        local t="$(eval printf "%s" "\"\${$O#*${LIST_NEWLINE}}\"")"
        # local t="$(eval printf "%s" "\${$O#*${LIST_NEWLINE}}")"
        printf "AAA %s" "${t%%${LIST_NEWLINE}*}"

        printf "\nBBB %s" "${t}"
        local tt="$( printf "%s${LIST_NEWLINE}%s" "$((len-1))" "$(printf "%s" "${t#*${LIST_NEWLINE}}")" )"
        printf "\nTTT %s" "$tt"
        echo $O="\"\$tt\"" ;;
    esac
    return 0
}

list_index_of(){
    local O="${O:?list_name}"

    local value=${1:?idx}
    value=$(echo "$value" | tr '"\\' "\001\002")

    eval printf "%s" "\$$O" | awk -v value="$value" \
    '
        BEGIN{ 
            RS="\001"
            gsub("\001", "\"", value)
            gsub("\002", "\\", value)
        }
        NR!=1{
            if (value == $0) {
                print NR
                exit 0
            }
        }
        END{
            exit 1
        }
    ' -
}

list_remove_by_value(){
    local O="${O:?list_name}"

    local value=${1:?value}
    value=$(echo "$value" | tr '"\\' "\001\002")

    local s
    s="$(eval printf "%s" "\$$O" | awk -v RS="$LIST_SEP" -v ORS="$LIST_SEP" -v value="$value" \
    '
        BEGIN{
            gsub("\001", "\"", value)
            gsub("\002", "\\", value)
        }
        {
            if (NR==1) {
                c=int($0)
                if (c==0)   print 0
                else        print c-1
            } else if ($0!=value) {
                print $0
            }
        }
    ' -)"

    eval "$O=\"\$s\""
}

list_remove(){
    local O="${O:?list_name}"

    local idx=${1:?idx}

    local s
    s="$(eval printf "\"%s\"" "\"\$$O\"" | awk -v idx="$idx" '
        BEGIN{ idx=int(idx) + 2 }
        {
            if (NR==1) {
                if ($0==0)  print 0
                else        print $0-1
            } else if (NR!=idx) {
                print $0
            }
        }
    ' -)"

    eval "$O=\"\$s\""
}

list_get_by_regex(){
    local O="${O:?list_name}"

    local pattern=${1:?pattern}
    pattern=$(echo "$pattern" | tr '"\\' "\001\002")

    eval printf "%s" "\$$O" | awk -v pattern="$pattern" \
    '
        BEGIN{ 
            RS="\001"
            gsub("\001", "\"", value)
            gsub("\002", "\\", value)
        }
        NR!=1{
            if (match($0, pattern)) {
                print NR
                gsub("\001", "\n", $0)
                print $0
                exit 0
            }
        }
        END{
            exit 1
        }
    ' -
}


list_print(){
    local O="${O:?list_name}"
    eval printf "%s" \"\$$O\" | awk 'NR>1{ gsub("\001", "\n", $0); print $0; }'
}

