# shellcheck shell=bash

# author:       Li Junhao           edwin.jh.lee@gmail.com    edwinjhlee.github.io
# maintainer:   Li Junhao      

# TODO: we should only check status
test.run.all() {
    local i
    for i in $(typeset -F | cut -d ' ' -f 3 | grep "tc:" | grep -v "tc:setup" | grep -v "tc:teardown"); do
        tc:setup
        @catch-final "
            Test Fail: codeline \$LINENO
        " "
            echo 'final'
            # aaa # Wrong command
        "
        eval "$i"
        tc:teardown
    done
}

tc.info(){
    echo hi
}


# TODO: We have to honor the TAP protocol
# TODO: Please follow http://testanything.org/tap-specification.html

test.tap(){
    # Version
    echo "TAP version 13" >&3

    # The Plan
    echo "1..${NUMBER_OF_TESTCASE}"

    # Test Line
    echo "ok $INDEX $DESCRIPTION"

    echo "not ok $INDEX $DESCRIPTION"
}

testsuite(){
    local filepath func
    for filepath in "$@"; do
        if (
            for func in $(typeset -F | cut -d ' ' -f 3 | grep "tc:" ); do
                unset -f "$func" 
            done >&2
            # shellcheck disable=SC1090
            source "$filepath" >&2
            ( test.run.all ) >&2
            echo "$?"
        ); then
            :
        else
            echo "Fail on test file: $filepath"
            return 1
        fi

    done
}

# Move doctest here
# shellcheck shell=bash

x.debug.init doctest

test.doctest.run_code(){
    local test_script_fifo=${test_script_fifo:?Provide test script fifo}
    local out_fifo=${out_fifo:?Provide out fifo}

    local script_code="${1:?"Provide script code"}"
    local script_actual_result script_expect_result="${2}"

    echo "${script_code:1}" >"$test_script_fifo"
    script_actual_result="$(cat "$out_fifo")"
    if [ ! "$script_actual_result" == "$script_expect_result" ]; then
        {
            echo -e "\033[31mNOT ok\033[0m"
            echo -e "\033[36m--code--\033[0m"
            echo "$script_code"
            echo -e "\033[32m--expect--\033[0m"
            echo "$script_expect_result"
            echo -e "\033[31m--actual--\033[0m"
            echo "$script_actual_result"          
            echo "===="
            return 1
        }
    fi
}

test.doc(){ test.doctest "$@"; }

test.doctest(){
    local test_script_fifo="doctest.tmp.input.fifo" out_fifo="doctest.tmp.output.fifo"

    rm "$test_script_fifo" "$out_fifo" 2>/dev/null 
    mkfifo "$test_script_fifo" "$out_fifo"

    export test_script_fifo out_fifo
    (
        #shellcheck disable=SC1090
        source "$1";
        test.doctest.exec_script "${1:?script}" "$test_script_fifo" "$out_fifo" 1>/dev/null 2>&1
    ) &

    local PROCESS_ID="$!"
    local return_code=0

    local start="" block=() script_code="" script_expect_result=""
    while read -r line; do
        if [ -n "$start" ]; then
            if [[ ! "$line" =~ ^$start$ ]]; then
                block=("${block[@]}" "$line")
                # TODO: block+=("$line")
                continue
            fi

            doctest.debug "starting running"

            start="" # clear out
            local cl
            block+=("> ")
            for cl in "${block[@]}"; do
                # If it is not command
                if [[ ! "$cl" =~ ^\>[[:space:]] ]]; then
                    if [ -z "$script_expect_result" ]; then
                        script_expect_result="$cl"
                    else
                        script_expect_result="$script_expect_result
$cl"
                    fi
                    continue
                fi

                # IF it is a command
                if [ -n "$script_code" ]; then
                    test.doctest.run_code "$script_code" "$script_expect_result" || {
                        return_code=$?
                        break 2
                    }
                fi

                script_code="$cl"
                script_expect_result=""
            done
            continue
        fi

        # Must start with doctest
        # [[ "$line" =~ ^\<\<([[:alnum:]]+)$ ]] && {
        [[ "$line" =~ ^\ *\:*\ *\<\<\'((doctest|DOCTEST)[A-Za-z0-9-]*)\'$ ]] && {
            start="${BASH_REMATCH[1]}"
            doctest.debug "Token FOUND: $start"
            block=()
        }
    done <"$1"

    echo "return" > "$test_script_fifo"
    cat "$out_fifo" # Or the execScript will be block because of the redirection
    rm "$test_script_fifo" "$out_fifo"
    kill -9 $PROCESS_ID 1>/dev/null 2>&1
    return $return_code
}

test.doctest.exec_script(){
    while :; do
        eval "$(cat "${2:?fifo file}")" 1>"${3:?output fifo file}" 2>&1
    done
}

