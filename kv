
# Cache KV
# Using cache for a reason. We need to store the some result

# KV Cache Using File
cache.make(){
    local O="${1:?Provide Object name}" tmp
    tmp="$(mktemp)"
    rm "$tmp" && mkdir -p "$tmp"
    eval "$O=$tmp"
}

cache.free(){
    local O="${O:?Provide Object name}"
    case "$O" in
        /);;
        /bin*);;
        *) rm -rf "$O"; return 0 ;;
    esac

    printf "Cache Folder provided to delete is considered critical. Please assure path is right and then remove it manually:\n%s\n" "$O"
}

cache.new(){ 
    # oo.create_new_function cache "$@";
    :
}


<<DOCTEST
> cache.make abc; O=abc
> cache.get a; echo $?
1
> cache.put a 1
> cache.get a
1
> cache.get c :- 3
3
> cache.get c; echo $?
1
> cache.get t := 5
5
> cache.get t
5
> cache.get g :== echo $(( 3 ** 8 ))
6561
> cache.get f :=eval echo $(( 3 ** 6 ))
729
> cache.free
DOCTEST
cache.get(){
    local O="${O:?Provide Object name}"
    local dirpath="${!O:?Cache $O not defined}"
    local key="${1:?Please provide key}"; shift
    local keypath="$dirpath/$key"
    [ -f "$keypath" ] && { cat "$keypath"; return 0; }

    local op="${1}"; shift
    case $op in
        :=)     echo "$1"; printf "%s" "$1" >"$keypath";;
        :-)     echo "$1";;
        :?)     echo "$1" >&2; return 1;;
        :=eval | :==)    eval "$@" | tee "$keypath";;
        *)      return 1;;
    esac
}

cache.put(){
    local O="${O:?Provide Object name}"
    local dirpath="${!O:?Cache $O not defined}"
    local key="${1:?Please provide key}"
    local keypath="$dirpath/$key"
    local value="${2:?Please provide value}"
    printf "%s" "$value" >"$keypath"
}