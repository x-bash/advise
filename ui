# shellcheck shell=bash

# author:       Li Junhao           edwin.jh.lee@gmail.com    edwinjhlee.github.io
# maintainer:   Li Junhao

# For some advancing usage. Refer to http://linuxcommand.org/lc3_adv_tput.php

# relis on tput command

COLP() {
  tput setaf "$1"
  shift
  echo -ne "$@"
  tput sgr0
}

COLBP() {
  tput setaf "$1"
  tput bold
  shift
  echo -ne "$@"
  tput sgr0
}

ERROR() { COLBP 1 "$@"; }
WARN() { COLBP 3 "$@"; }
INFO() { COLBP 2 "$@"; }
FINE() { COLBP 4 "$@"; }

@log() { COLBP 4 "$@"; }
@warn() { COLBP 3 "$@"; }
@err() { COLBP 1 "$@"; }
# @info() { COLBP 2 "$@"; }

@echop() {
  [ '' != "$FG" ] && tput setaf "$FG"
  [ '' != "$BG" ] && tput setab "$BG"
  tput bold
  echo "$@"
  tput sgr0
}

## tput screen facility

ui.save_screen() { tput smcup; }
ui.restore_screen() { tput rmcup; }
ui.screen() {
  ui.save_screen
  eval "$@"
  ui.restore_screen
}

@screen() { ui.screen "$@"; }

ui.banner() {
  # echo -n ${BG:-$UI_BG_BLUE}${FG:-$UI_FG_WHITE}
  local FG BG
  FG=$(tput setaf "${1:-$UI_WHITE}")
  BG=$(tput setab "${2:-$UI_BLUE}")
  echo "$FG$BG"
  clear
  cat
}

# ui green bold -- 
# $(ui green/bold -- "hello world")
# $(ui green/bold -- "design")
# $(ui :a1)
# $(ui :a2)
# $(ui :a3)

# w_a1=$(tput)
# w_a2=

# ui
{
  export UI_BLACK=0
  export UI_RED=1
  export UI_GREEN=2
  export UI_YELLOW=3
  export UI_BLUE=4
  export UI_MAGNETA=5
  export UI_CYAN=6
  export UI_BLACK=7
}

# shellcheck disable=SC2155
{
  export UI_BG_BLUE="$(tput setab 4)"
  export UI_BG_BLACK="$(tput setab 0)"
  export UI_FG_GREEN="$(tput setaf 2)"
  export UI_FG_WHITE="$(tput setaf 7)"
}

ui(){
  local f=$1
  case "$f" in
    http://* | https://* | ftp://* |ftps://* | git://* ) ui.url "$f";;
    :) ui.print_var "$@" ;;
    *) ui.style "$@" ;;
  esac
}

ui.url(){
  echo "$(tput smul)${1:?Provide URL}$(tput rmul)"
}

ui.style(){
  while [ $# -gt 0 ]; do
    case "$1" in
      dim|debug) tput dim;;
      info) tput setaf 4; tput bold;;
      bold) tput bold ;;
      white) tput setaf 0;;
      red) tput setaf 1;;
      green) tput setaf 2;;
      warn|yellow) tput setaf 3;;
      blue) tput setaf 4;;
      purple|magneta) tput setaf 5;;
      lightblue|cyan) tput setaf 6;;
      black) tput setaf 7;;
      reset) tput reset ;;
      --) 
        shift; 
        echo -n "$@"
        tput sgr0;
        return 0
    esac
    shift
  done
}

# ui 最好的设计，就是在tputs上面做扩展，但增加更丰富的功能

ui.progress(){
    local maxw number=80 stars space percent=$1
    maxw="$(tput cols)"
    [ "$maxw" -lt $number ] && number=$maxw
    stars="$(seq -f "${2:-#}" -s '' "$number")"
    space="$(seq -f " " -s '' "$number")"
    local v=$(( ${#stars} * percent / 100 ))
    local v100=$((100 - v))
    echo -e "($percent %)|${stars:0:$v}${space:v:$v100}|"
}

ui.cursor.save(){
    tput sc # save the cursor postition
}

ui.cursor.restore(){ 
    tput rc # restore to the last cursor position
    tput sc # save the cursor postition
    tput ed # clr_eos: clear the characters until the end of screen
}

RUN_CMD_WITH_INFO() {
  local INFO=$1
  shift 1
  INFO "======================\n"
  INFO "$INFO\n"
  INFO "======================\n"
  eval "$@"
}

RUN_CMD_WITH_STEP() {
  local STEP=$1
  local INFO="STEP $STEP: $2"
  shift 2
  RUN_CMD_WITH_INFO "$INFO" "$@"
}

# x con "**Hello World**"
# x con "# Hello"
# x con "**hello**"
# x con "~hello~"
# x con ""

@src str # Rely on @src str, consider remove this dependency
ui.yesno() {
  local p
  while true; do
    read -r -p "$1 (Input 'y' for yes or 'n' for no): " p
    # TODO: Rely on @src str, consider remove this dependency
    p="$(str.trim "$p")"
    if [ "$p" == "y" ]; then
      return 0
    fi

    if [ "$p" == "n" ]; then
      return 1
    fi
  done
}

ui.select() {
  echo "" >&2
  echo "${MSG:-"Select in the following list:"}" >&2
  local x=0
  for i in "$@"; do
    (( x=x+1 ))
    echo "$x: $i" >&2
  done
  echo "" >&2

  local choice
  while true; do
    read -r -p "Input your choice: " choice >&2
    if [[ "$choice" =~ ^[0-9]+$ ]]; then
      if [ "$choice" -gt 0 ] && [ "$choice" -le "$#" ]; then
        echo "$choice"
        return 0
      fi
    fi
  done

}

ui.readint() {
  local min=${1:?Provide min}
  local max=${2:?Provide max}

  local choice
  while true; do
    read -r -p "${MSG:-Read integer: }" choice
    if [[ "$choice" =~ ^[0-9]+$ ]]; then
      if [ "$choice" -ge "$min" ] && [ "$choice" -le "$max" ]; then
        echo "$choice"
        return 0
      fi
    fi
  done
}

# A=$(ui.read_integer)


ui.color(){
  #  https://unix.stackexchange.com/questions/269077/tput-setaf-color-table-how-to-determine-color-codes
  :
}

