# param situation

# refer https://stackoverflow.com/questions/673055/correct-bash-and-shell-script-variable-capitalization

param.__localize_argenv_parameter(){
    local sw=0
    for i in $@; do
        if [ $sw == 1 ]; then
            echo "local $i=\${$i};";
            return 0
        fi
        if [[ "$i" =~ param.arg(env)? ]] || [[ "$i" =~ param.(env)? ]]; then
            sw=1
        fi
    done
    return 1
}

param.__trap_localize_argenv_parameter(){
    
    local final_code='eval "$(param.__localize_argenv_parameter $BASH_COMMAND)" 2>/dev/null' 

    local latest_debug_code
    latest_debug_code=$(trap DEBUG)
    local latest_debug_set
    latest_debug_set="trap ${latest_debug_code:-"\"\""} DEBUG"

    local command_code='eval RUN=yes ${BASH_COMMAND/no/yes}'

    final_code="
    $final_code
    $command_code
    $latest_debug_set"

    trap "$final_code" DEBUG
}


param.__handle(){

    if [ "$RUN" == "no" ]; then
        return 0
    fi

    local name=${1:?"Please provide argument name, in lower case"}
    local value

    local msg=""

    if [ "${CHECK_ENV}" == "yes" ]; then
        value=${!name}
        msg="Please passing parameter in environment form '$name=<value>'"
    fi 

    # TODO: see if the ARGS non zero
    local v
    # if it is array, means
    if declare -p CHECK_ARGS 2> /dev/null | grep -q '^declare \-a'; then
        
        if [ -z "$msg" ]; then
            msg="Please passing parameter in argument form '--$name <value>' or '--name=<value>'"
        else
            msg="Please passing parameter in argument form '--$name <value>' or '--name=<value>, or in environment form '$name=<value>'."
        fi

        for i in "${!CHECK_ARGS[@]}"; do
            v=${CHECK_ARGS[$i]}
            if [[ "$i" =~ ^--$name= ]]; then
                value="${i#*=}"
                break
            fi

            if [[ "$i" =~ ^--$name ]]; then
                value=${CHECK_ARGS[ ((++i)) ]}
                break
            fi
        done
    fi

    if [ "$REQUIRE" == "yes" ]; then
        echo "$msg" >&2
        return 1
    fi

    shift 1

    local description=()
    local choices=()

    for i in "$@"; do
        if [ "$i" = "=" ] || [ "$i" = "=~" ] || [ "$i" = "int" ]; then
            choices=("$@")
            break
        fi
        description=("${description[@]}" "$i")
        shift 1
    done

    
    case ${choices[0]} in
    int)
        if [[ "$value" =~ [0-9]+ ]]; then
            return 0
        else
            echo "Expect Environment Variable to be an integer: $name"
            return 1
        fi ;;
    =)
        if [ -z "$value" ]; then
            eval $name="${choices[1]}"
            return 0
        fi
       
        for i in "${choices[@]:1}"; do
            [ "$value" == "$i" ] && return 0
        done
        {
            echo "Value of $name is: '${!name}'"
            echo "Exepcted values: ${choices[@]:1}" 
        }>&2
        return 1;;
    =~)
        for i in "${choices[@]:1}"; do
            [[ "$value" =~ ^$i$ ]] && return 0
        done
        {
            echo "Value of $name is: '${!name}'"
            echo "Exepcted patterns: ${choices[@]:1}" 
        }>&2
        return 1;;
    esac
}


alias @argenv=" param.__trap_localize_argenv_parameter; RUN=no CHECK_ARGS=("$@")    CHECK_ENV=yes REQUIRE=no  param.__handle"
alias @arg="    param.__trap_localize_argenv_parameter; RUN=no CHECK_ARGS=("$@")    CHECK_ENV=no  REQUIRE=no  param.__handle"
alias @env="    param.__trap_localize_argenv_parameter; RUN=no CHECK_ARGS=no        CHECK_ENV=yes REQUIRE=no  param.__handle"

alias @argenv.require=" param.__trap_localize_argenv_parameter; RUN=no CHECK_ARGS=("$@")    CHECK_ENV=yes REQUIRE=yes param.__handle"
alias @arg.require="    param.__trap_localize_argenv_parameter; RUN=no CHECK_ARGS=("$@")    CHECK_ENV=no  REQUIRE=yes param.__handle"
alias @env.require="    param.__trap_localize_argenv_parameter; RUN=no CHECK_ARGS=no        CHECK_ENV=yes REQUIRE=yes param.__handle"

work(){
    eval "$(
        +argenv org     "Provide organization"
        +argenv repo    "Provide work"
        -arg    direction = abc dec a
        -arg    meter =~ [0-9]{1,3}
    )"

    @argenv org     "Provide organization"
    @argenv repo    "Provide work"
    @arg    direction = abc dec a
    @arg    meter =~ [0-9]{1,3}
    
    # support environment variable
    # major variable could be in arguments

    org=d-y-i name=worker gt.repo.create

    local org=d-y-i
    name=worker gt.repo.create
    
    # design code
    # if passing value, we should use environment variable, because it is more accurate
    # if flag, we should use argument, like --latest
    gt.repo.create --org=d-y-i --name=worker
    
}

