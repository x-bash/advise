# shellcheck shell=bash
# param situation

# refer https://stackoverflow.com/questions/673055/correct-bash-and-shell-script-variable-capitalization

param.__localize_argenv_parameter(){
    local sw=0
    for i in "$@"; do
        if [ $sw == 1 ]; then
            echo "local $i=\${$i};";
            return 0
        fi
        if [[ "$i" =~ param.arg(env)? ]] || [[ "$i" =~ param.(env)? ]]; then
            sw=1
        fi
    done
    return 1
}

# TODO: Consider replace the original implementation
param.__localize_argenv_parameter_2(){
    local prev=$1
    for cur in "${@:2}"; do
        if [[ "$prev" =~ param.arg(env)? ]] || [[ "$prev" =~ param.(env)? ]]; then
            echo "local $cur=\${$cur};";
            return 0
        fi
        prev="$cur"
    done
    return 1
}

param.__trap_localize_argenv_parameter(){

    # shellcheck disable=SC2016
    local final_code='eval "$(param.__localize_argenv_parameter $BASH_COMMAND)" 2>/dev/null' 

    local latest_debug_code
    latest_debug_code=$(trap DEBUG)
    local latest_debug_set
    latest_debug_set="trap ${latest_debug_code:-"\"\""} DEBUG"

    # shellcheck disable=SC2016
    local command_code='eval "${BASH_COMMAND/no/yes}" || return 1 2>/dev/null'

    final_code="
    $final_code
    $command_code
    $latest_debug_set"

    trap "$final_code" DEBUG
}


param.__handle(){

    if [ "$RUN" == "no" ]; then
        return 0
    fi

    local name=${1:?"Please provide argument name, in lower case"}
    local default=""
    
    if [[ "$name" == *=* ]]; then
        default=${name#*=}
        name=${name%%=*}
    fi

    local value

    local msg=""

    if [ "${CHECK_ENV}" == "yes" ]; then
        value=${!name}
        msg="Please passing parameter in environment form '$name=<value>'"
    fi 

    # TODO: see if the ARGS non zero
    local v
    # if it is array, means
    if [ "$__CHECK_ARGS_FLAG" == "yes" ]; then
        
        if [ -z "$msg" ]; then
            msg="Please passing parameter in argument form '--$name <value>' or '--name=<value>'"
        else
            msg="Please passing parameter in argument form '--$name <value>' or '--name=<value>, or in environment form '$name=<value>'."
        fi

        # for i in "${!__CHECK_ARGS[@]}"; do
        local i=0
        # delibrate
        # shellcheck disable=SC2068
        for v in ${__CHECK_ARGS[@]}; do
            (( i++ ))
            if [[ "$v" =~ ^--$name= ]]; then
                value="${v#*=}"
                break
            fi

            if [[ "$v" =~ ^--$name ]]; then
                value=${__CHECK_ARGS[ (( i )) ]}
                break
            fi
        done
    fi

    if [ -z "$value" ]; then
        value="$default"
        if [ -z "$value" ]; then
            echo "$msg" >&2
            return 1
        fi
    fi

    eval "$name=$value"

    # TODO: validate the function

    local description=()
    local choices=()

    shift 1 # Get rid of variable name
    for i in "$@"; do
        if [ "$i" = "==" ] || [ "$i" = "=~" ] || [ "$i" = "int" ] || [[ "$i" =~ string\[[0-9]+\] ]]; then
            choices=("$@")
            break
        fi
        description=("${description[@]}" "$i")
        # TODO: description+=("$i")
        shift 1
    done

    case ${choices[0]} in
    int)
        if [[ "$value" =~ [0-9]+ ]]; then
            return 0
        else
            echo "Expect Environment Variable to be an integer: $name"
            return 1
        fi ;;
    string\[*\])
        local NUM
        NUM="$([[ "${choices[0]}" =~ string\[([0-9]+)\] ]] && echo "${BASH_REMATCH[1]}")"
        if [[ "${#value}" -ne "${NUM:--1}" ]]; then
            echo "Expect length of string is ${NUM:--1}, but get ${#value}"
            return 1
        fi
        ;;
    ==)
        for i in "${choices[@]:1}"; do
            [ "$value" == "$i" ] && return 0
        done
        {
            echo "Value of $name is: '${!name}'"
            echo "Exepcted values: ${choices[*]:1}" 
        }>&2
        return 1;;
    =~)
        for i in "${choices[@]:1}"; do
            [[ "$value" =~ ^$i$ ]] && return 0
        done
        {
            echo "Value of $name is: '${!name}'"
            echo "Exepcted patterns: ${choices[*]:1}" 
        }>&2
        return 1;;
    esac
}

# TODO: seemed odd.
alias @argenv=' param.__trap_localize_argenv_parameter; RUN=no __CHECK_ARGS_FLAG=yes __CHECK_ARGS="$@"  CHECK_ENV=yes param.__handle'
alias @arg='    param.__trap_localize_argenv_parameter; RUN=no __CHECK_ARGS_FLAG=yes __CHECK_ARGS="$@"  CHECK_ENV=no  param.__handle'
alias @env='    param.__trap_localize_argenv_parameter; RUN=no __CHECK_ARG_FLAGS=no                     CHECK_ENV=yes param.__handle'

shopt -s expand_aliases

# git-work(){
#     @argenv user "Provide Organization/User/Enterprise name"
#     @argenv repo "Provide repo"
#     @argenv access "Access Priviledge" == "private" "public" "inner-source"
    
#     echo "$user $repo $access"
# }

# git-work --user "el" --repo "page" --access="private"
# git-work --user "el" --repo "page" --access="public"

# alias hi="echo "
# hi hi
